<?php 
use App\Library\FuncionesGlobales;
?>
<style>
    .list-group-item {
      border: none; /* Elimina los bordes */
      cursor: pointer; /* Cambia el cursor al pasar por el div padre */
    }

    .hide{
        display: none;
    }

    .div_label_accion {
        margin-bottom: 5px; /* Reduce el espacio vertical entre los elementos */
        padding: 0; /* Opcional: elimina el relleno interno si es necesario */
    }

    .div_check {
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da; /* Color del borde */
        border-radius: 0.375rem; /* Bordes redondeados */
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        max-width: calc(100% - 1px); /* Reduce el ancho en 1px */
        cursor: pointer;
    }

    .hide {
        display:none;
    }

    /* ESTILO PARA MODAL DE INFORMACION */
    #modal_info_cita .modal-header {
    background-color: #343a40;
    color: #fff;
    border-bottom: 1px solid #dee2e6;
    border-top-left-radius: 0.75rem;
    border-top-right-radius: 0.75rem;
    }

    /* Labels dentro del body */
    #modal_info_cita .modal-body label {
    font-weight: 600;
    color: #495057;
    }

    /* Spans dentro del body */
    #modal_info_cita .modal-body span {
    display: inline-block;
    margin-top: 0.25rem;
    font-weight: 500;
    color: #212529;
    }

    /* Separadores de secciones */
    #modal_info_cita .row.mb-3 {
    padding: 10px 0;
    border-bottom: 1px dashed #ced4da;
    margin-bottom: 15px;
    }

    /* Información de cancelación */
    #modal_info_cita .div_info_cancelacion {
    background-color: #fff3cd;
    border: 1px solid #ffeeba;
    padding: 15px;
    border-radius: 0.5rem;
    margin-top: 15px;
    }

    #modal_info_cita .div_info_cancelacion label {
    font-weight: bold;
    color: #856404;
    margin-bottom: 10px;
    }

    /* Lista de servicios */
    #modal_info_cita .div_servicios {
    /*background-color: #f1f3f5;  Fondo uniforme para toda la sección */
    border: 1px solid #ced4da;
    padding: 15px;
    border-radius: 0.5rem;
    margin-top: 20px;
    }

    #modal_info_cita .div_servicios label {
    font-weight: bold;
    margin-bottom: 10px;
    display: block;
    color: #495057;
    }

    #modal_info_cita .div_servicios .d-flex {
    align-items: center;
    }

    /* Quitamos el fondo de las filas de encabezado de servicios */
    #modal_info_cita .div_servicios .div_header_servicios .d-flex {
    background-color: transparent;
    }

    /* Total en servicios */
    #modal_info_cita .div_servicios .total {
    font-size: 1.1rem;
    color: #343a40;
    }

    /* Footer del modal */
    #modal_info_cita .modal-footer {
    border-top: none;
    }

    /* Botón de cancelar */
    #modal_info_cita .btn-outline-dark {
    border-radius: 0.5rem;
    padding: 6px 20px;
    }

    /* Estilos encapsulados dentro de .div_header_days_container */
    .div_header_days_container {
        font-family: Arial, sans-serif;
    }
    .div_header_days_container .agenda-container {
        display: flex;
        flex-direction: column;
        border: 1px solid #ddd;
        margin: 20px;
        position: relative; /* Necesario para posicionar el div flotante */
    }
    .div_header_days_container .agenda-row {
        display: flex;
        border-bottom: 1px solid #ddd;
        position: relative; /* Necesario para posicionar el div flotante */
    }
    .div_header_days_container .agenda-time {
        flex: 0 0 100px;
        padding: 10px;
        background-color: #f8f9fa;
        border-right: 1px solid #ddd;
        text-align: center;
    }
    .div_header_days_container .agenda-service {
        flex: 1;
        padding: 10px;
        border-right: 1px solid #ddd;
        position: relative; /* Necesario para posicionar el div flotante */
        /*transition: border-color 0.3s ease;  Transición suave para el hover */
    }
    .div_header_days_container .agenda-service:last-child {
        border-right: none;
    }
    .div_header_days_container .agenda-hours:hover:not(.no-hover-effect) {
        border: 1px solid #007bff; 
    }
    .div_header_days_container .agenda-header {
        font-weight: bold;
        background-color: #e9ecef;
    }
    .div_header_days_container .evento-flotante {
        position: absolute;
        background-color: rgba(0, 123, 255, 0.2);
        border: 1px solid #007bff; 
        width: 100%; /* CAMBIO: usar todo el ancho */
        left: 0; /* CAMBIO: alinear a la izquierda */
        z-index: 10;
        box-sizing: border-box;
        pointer-events: auto;
        cursor: pointer;
    }

    .div_header_days_container .evento-flotante span {
        color: #fff;
        text-align: center;
        font-size: 14px;
        line-height: 1.2;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        margin-right: 8px; /* Espacio entre spans */
    }

    /* Reducción dinámica del tamaño del texto si es necesario */
    .div_header_days_container .evento-flotante span {
        font-size: clamp(10px, 2vw, 14px); /* Adaptar el tamaño del texto dinámicamente */
    }

    .div_header_filters .navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .div_header_filters .navigation .left-section {
        display: flex;
        align-items: center;
        gap: 10px; /* Espacio entre los botones */
        width: 400px; /* Ancho fijo para left-section */
    }
    .div_header_filters .navigation .right-section {
        display: flex;
        align-items: center;
        gap: 10px; /* Espacio entre los botones */
    }
    .div_header_filters .navigation button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }
    .div_header_filters .filters {
        display: flex;
        gap: 20px; /* Espacio entre los select */
        margin: 20px;
    }
    .div_header_filters .filters select {
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

</style>

<div class="container mt-4">
    <!-- Section 1: Search Filters -->
    <div>
        <h2><?php echo FuncionesGlobales::UpperString($translations['html_control_appoitment']); ?></h2>
    </div>
    <div id="header_filters" class="card mb-4">
        <div class="card-header">
            <h5><?php echo $translations['html_header_search']; ?></h5>
        </div>
        <div class="card-body">
            <form id="searchForm" class="row g-3">
                <div class="col-md-4">
                    <label for="select_locaciones" class="form-label"><?php echo $translations['html_locations']; ?></label>
                    <?php $count_locaciones = count($arr_locaciones); ?>
                    <select id="select_locaciones" class="select_locaciones" <?php echo $count_locaciones == 1 ? 'disabled' : ''; ?>>
                        <option value=""></option>
                        <?php foreach($arr_locaciones as $locacion): ?>
                            <option value="<?php echo $locacion['id']; ?>" <?php echo $count_locaciones == 1 ? 'selected' : ''; ?>><?php echo $locacion['nombre']; ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="select_profesionales" class="form-label"><?php echo $translations['html_title_professionals']; ?></label>
                    <select id="select_profesionales" class="select_profesionales">
                        <option value=""></option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="nameFilter" class="form-label"><?php echo $translations['html_title_patients']; ?></label>
                    <select id="select_pacientes" class="select_pacientes">
                        <option value=""></option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="input_rango_fecha_inicio" class="form-label"><?php echo $translations['html_appointment_date']; ?></label>
                    <input type="date" class="form-control" id="input_rango_fecha_inicio" name="input_rango_fecha_inicio" placeholder="<?php echo $translations['html_appointment_date']; ?>">
                </div>
                <div class="col-md-4">
                    <label for="rango_fecha_termino" class="form-label"><?php echo $translations['html_limit_date']; ?></label>
                    <input type="date" class="form-control" id="input_rango_fecha_termino" name="input_rango_fecha_termino" placeholder="<?php echo $translations['html_limit_date']; ?>">
                </div>
                <div class="col-md-4">
                    
                </div>
                <div class="col-md-4">
                    <label class="form-label"><b><?php echo $translations['html_filter_appoitments']; ?></b></label>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="filtro_citas" id="radio_todas" value="todas" checked>
                        <label class="form-check-label" for="radio_todas">
                            <?php echo $translations['html_all_appoitments']; ?>
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="filtro_citas" id="radio_activas" value="activas">
                        <label class="form-check-label" for="radio_activas">
                            <?php echo $translations['html_active_appoitments']; ?>
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="filtro_citas" id="radio_canceladas" value="canceladas">
                        <label class="form-check-label" for="radio_canceladas">
                            <?php echo $translations['html_canceled_appoitments']; ?>
                        </label>
                    </div>
                    <label class="form-label"><b><?php echo $translations['html_pay_filters']; ?></b></label>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="filtro_citas_pago" id="check_pagadas" value="canceladas">
                        <label class="form-check-label" for="check_pagadas">
                            <?php echo $translations['html_paid_appoitments']; ?>
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" name="filtro_citas_pago" id="check_adeudo" value="canceladas">
                        <label class="form-check-label" for="check_adeudo">
                            <?php echo $translations['html_debt_appoitments']; ?>
                        </label>
                    </div>
                </div>

                <div class="col-md-12 text-end">
                    <button type="button" class="btn btn-outline-dark" id="btnBuscar">
                        <i class="bi bi-search"></i> 
                        <?php echo $translations['html_btn_search']; ?>
                    </button>
                    <button type="button" class="btn btn-outline-dark" id="btn_agenda_opening">
                        <i class="bi bi-calendar-date"></i>
                        <?php echo $translations['html_agenda_opening']; ?>
                    </button>
                </div> 
            </form>
        </div>
    </div>

    <!-- Section 2: Data Table -->
    <div class="card">
        <div class="card-header">
            <h5><?php echo $translations['html_header_results']; ?></h5>
        </div>
        <div class="card-body">
            <table id="table_results" class="display table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th><?php echo $translations['html_title_patient']; ?></th>
                        <th><?php echo $translations['html_title_professional']; ?></th>
                        <th><?php echo $translations['html_service_cost']; ?></th>
                        <th><?php echo $translations['html_appointment_date']; ?></th>
                        <th><?php echo $translations['html_paid']; ?></th>
                        <th><?php echo $translations['html_status']; ?></th>
                        <th><?php echo $translations['html_action']; ?></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<div class="modal fade" id="modal_agenda_opening" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_agenda_opening"><?php echo FuncionesGlobales::UpperString($translations['html_agenda_opening']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_agenda_opening" class="needs-validation" novalidate>
            <div class="row mb-3">
                <!-- Campo Clave -->
                <div class="col-md-6">
                    <label for="input_clave" class="col-form-label"><?php echo $translations['html_location']; ?></label>
                    <?php $count_locaciones = count($arr_locaciones); ?>
                    <select id="select_locaciones_modal" class="select_locaciones_modal" <?php echo $count_locaciones == 1 ? 'disabled' : ''; ?> required>
                        <option value=""></option>
                        <?php foreach($arr_locaciones as $locacion): ?>
                            <option value="<?php echo $locacion['id']; ?>" <?php echo $count_locaciones == 1 ? 'selected' : ''; ?>><?php echo $locacion['nombre']; ?></option>
                        <?php endforeach; ?>
                    </select>
                    <div class="invalid-feedback"><?php echo $translations['html_error_selected_location']; ?></div>
                </div>
                <div class="col-md-6">
                    <label for="input_fecha_inicio" class="col-form-label"><?php echo $translations['html_starting_date']; ?></label>
                    <input type="date" class="form-control" id="input_fecha_inicio" disabled required>
                    <div class="invalid-feedback"><?php echo $translations['html_error_starting_date']; ?></div>
                </div>
                <div class="col-md-6">
                    <label for="input_fecha_termino" class="col-form-label"><?php echo $translations['html_limit_date']; ?></label>
                    <input type="date" class="form-control" id="input_fecha_termino" disabled required>
                    <div class="invalid-feedback"><?php echo $translations['html_error_starting_date']; ?></div>
                </div>
            </div>
            <div id="alert_error" class="alert alert-danger align-items-center" role="alert" style="display:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div id="msg_error">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
        <button type="button" id="btnSave" class="btn btn-primary"><?php echo $translations['html_btn_save']; ?></button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="modal_cancelar_cita" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_cancelar_cita"><?php echo FuncionesGlobales::UpperString($translations['html_cancel_appointment']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_cancelar_cita" class="needs-validation" novalidate>
            <div class="row mb-3">
                <!-- Campo Clave -->
                <div class="col-md-12">
                    <label for="input_clave" class="col-form-label"><?php echo $translations['html_reason_cancellation']; ?></label>
                    <select id="select_motivo_cancelacion">
                        <option></option>
                        <?php foreach($motivos_cancelacion_cita as $motivo): ?>
                            <option value="<?php echo $motivo['id']; ?>"><?php echo $motivo['nombre']; ?></option>
                        <?php  endforeach; ?>
                    </select>
                    <div class="invalid-feedback"><?php echo $translations['html_error_reason_cancellation']; ?></div>
                </div>
                <div class="col-md-12">
                    <label for="input_clave" class="col-form-label"><?php echo $translations['html_observations']; ?></label>
                    
                    <textarea row="2" id="textarea_observaciones_cancelacion" class="form-control"></textarea>
                    <div class="invalid-feedback"><?php echo $translations['html_error_reason_cancellation']; ?></div>
                </div>
            </div>
            <div id="alert_error" class="alert alert-danger align-items-center" role="alert" style="display:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div id="msg_error">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
        <button type="button" id="btnSave" class="btn btn-primary"><?php echo $translations['html_btn_save']; ?></button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="modal_info_cita" tabindex="-1" aria-labelledby="label_modal_info_cita" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_info_cita"><?php echo FuncionesGlobales::UpperString($translations['html_info_appointment']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_cancelar_cita" class="needs-validation" novalidate>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label><?php echo $translations['html_title_patient']; ?>:</label>
                    <div id="nombre_paciente" class="d-block"></div>
                </div>
                <div class="col-md-4">
                    <label><?php echo $translations['html_title_professional']; ?>:</label>
                    <div id="nombre_profesional" class="d-block"></div>
                </div>
                <div class="col-md-4">
                    <label><?php echo $translations['html_appointment_date']; ?>:</label>
                    <div id="fecha_cita" class="d-block"></div>
                </div>
                <div class="col-md-4">
                    <label><?php echo $translations['html_hour']; ?>:</label>
                    <div id="hora_cita" class="d-block"></div>
                </div>
                <div class="col-md-4 hide_by_pay">
                    <label><?php echo $translations['html_ab_duration']; ?>:</label>
                    <div id="duracion" class="d-block"></div>
                </div>
                <div class="col-md-4 hide_by_pay">
                    <label><?php echo $translations['html_user_capture']; ?>:</label>
                    <div id="usuario_captura" class="d-block"></div>
                </div>
                <div class="col-md-4 hide_by_pay">
                    <label><?php echo $translations['html_attendance_status']; ?>:</label>
                    <div id="asistencia" class="d-block"></div>
                </div>
                <div class="col-md-4 hide_by_pay">
                    <label><?php echo $translations['html_appoitment_type']; ?>:</label>
                    <div id="tipo_cita" class="d-block"></div>
                </div>
                <div class="col-md-4 hide_by_pay">
                    <label><?php echo $translations['html_status']; ?>:</label>
                    <div id="estatus" class="d-block"></div>
                </div>
                <div class="col-md-4 show_by_pay" style="display:none;">
                    <label><?php echo $translations['html_paid']; ?>:</label>
                    <div id="pagada" class="d-block"></div>
                </div>
                <div class="col-md-4 show_by_pay" style="display:none;">
                    <label><?php echo $translations['html_payment_date']; ?>:</label>
                    <div id="fecha_pago" class="d-block"></div>
                </div>
                <div class="col-md-4 show_by_pay" style="display:none;">
                    <label><?php echo $translations['html_method_payment']; ?>:</label>
                    <div id="forma_pago" class="d-block"></div>
                </div>
                <div class="col-md-12 div_info_cancelacion hide">
                    <label><?php echo $translations['html_info_cancel_appoitment']; ?></label>
                    <div class="row">
                        <div class="col-md-4">
                            <label><?php echo $translations['html_date']; ?>:</label>
                            <div id="fecha_cancelacion" class="d-block"></div>
                        </div>
                        <div class="col-md-4">
                            <label><?php echo $translations['html_user']; ?>:</label>
                            <div id="usuario_cancelacion" class="d-block"></div>
                        </div>
                        <div class="col-md-4">
                            <label><?php echo $translations['html_reason']; ?>:</label>
                            <div id="motivo_cancelacion" class="d-block"></div>
                        </div>
                        <div class="col-md-12">
                            <label><?php echo $translations['html_observations']; ?>:</label>
                            <div id="observaciones_cancelacion" class="d-block"></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12 div_servicios">
                    <div class="col-md-12"><label>Lista de servicios</label></div>
                    <div class="d-flex border-bottom fw-bold py-2 mt-3">
                        <div class="flex-fill">Servicio</div>
                        <div class="flex-fill">Duración</div>
                        <div class="flex-fill">Costo</div>
                    </div>

                    <!-- Primera fila de datos -->
                    <div class="div_header_servicios">
                    </div>

                    <!-- Total -->
                    <div class="d-flex justify-content-end fw-bold py-2 mt-2">
                        <div>Total: $<span class="total"></span></div>
                    </div>
                    <?php if ($registrar_pago): ?>
                    <div class="col-md-12 div_forma_pago show_by_pay" align="center" style="display:none;">
                        <label>Forma de pago</label>
                        <input type="radio" name="forma_pago" value="EFECTIVO"  checked/> Efectivo
                        <input type="radio" name="forma_pago" value="TRANSFERENCIA"  /> Transferencia
                    </div>
                    <?php endif;?>
                </div>
                
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <?php if ($registrar_pago): ?>
        <button type="button" class="btn btn_registrar_pago show_by_pay" style="display:none;"></button>
        <?php endif;?>
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_close']; ?></button>
      </div>
    </div>
  </div>
</div>

<div id="template_servicio_cita_diaria" class=" py-2 border-bottom hide">
    <div class="flex-fill servicio">Lenguaje</div>
    <div class="flex-fill"><span class="duracion"></span> Min</div>
    <div class="flex-fill costo">$<span clas="costo"></span></div>
</div>

<div class="modal fade modal-xl" id="modal_save_class" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_agenda_opening"><?php echo FuncionesGlobales::UpperString($translations['html_schedule_an_appointment']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_create" class="needs-validation" novalidate>
            <div class="row mb-3 div_input_paciente">
                <div class="div_select_paciente col-md-12">
                    <label for="select_paciente_modal" class="col-form-label"><?php echo $translations['html_title_patient']; ?></label>
                    <select id="select_paciente_modal" class="select_paciente_modal">
                        <option value=""></option>
                    </select>
                    <div class="invalid-feedback"><?php echo $translations['html_error_enter_cellphone_name']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_celular" class="col-form-label"><?php echo $translations['html_cellphone']; ?></label>
                    <input type="text" id="input_celular" name="input_celular" class="form-control" maxLength="10" required />
                    <div class="invalid-feedback"><?php echo $translations['html_error_cellphone']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_primer_apellido" class="col-form-label"><?php echo $translations['html_first_lastname']; ?></label>
                    <input type="text" id="input_primer_apellido" name="input_primer_apellido" class="form-control input_nombres" required />
                    <div class="invalid-feedback"><?php echo $translations['html_error_first_lastname']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_segundo_apellido" class="col-form-label"><?php echo $translations['html_second_lastname']; ?></label>
                    <input type="text" id="input_segundo_apellido" name="input_segundo_apellido" class="form-control input_nombres" />
                    <div class="invalid-feedback"><?php echo $translations['html_second_lastname']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_nombre" class="col-form-label"><?php echo $translations['html_name']; ?></label>
                    <input type="text" id="input_nombre" name="input_nombre" class="form-control input_nombres" required />
                    <div class="invalid-feedback"><?php echo $translations['html_error_name']; ?></div>
                </div>
            </div>
            <div class="row mb-3 div_text_paciente" style="display:none;">
                <div class="col-md-4">
                    <label for="span_paciente" class="col-form-label"><b><?php echo $translations['html_title_patient']; ?>:</b> <span id="span_paciente"></label>
                </div>
                <div class="col-md-4">
                    <label for="span_fecha_cita" class="col-form-label"><b><?php echo $translations['html_appoinment_date']; ?>:</b> <span id="span_fecha_cita"></label>
                </div>
                <div class=" col-md-4 text-right">
                    <label for="input_modify_day" class="col-form-label"><?php echo $translations['html_reschedule_appoitment']; ?></label>
                    <input type="checkbox" id="input_modify_day" name="input_modify_day" />
                </div>
                <div class="row div_cambiar_dia col-md-12 div_header_filters" style="display:none;">
                    <div class="navigation" style="width:50%">
                        <!-- Sección izquierda: Botones de Mes, Semana y Día -->
                        <div class="left-section">
                            <button type="button" id="btn-semana-anterior" class="btn btn-secondary"><<</button>
                            <button type="button" id="btn-anterior" class="btn btn-secondary"><</button>
                            <h3 id="fecha-actual"></h3>
                            <button type="button" id="btn-siguiente" class="btn btn-secondary">></button>
                            <button type="button" id="btn-semana-siguiente" class="btn btn-secondary">>></button>
                            <button type="button" id="btn-hoy" class="btn btn-primary"><?php echo $translations['html_today']; ?></button>
                        </div>
                    </div>
                    <div class="navigation" style="width:50%">
                        <div class="col-md-12">
                            <label for="select_profesionales_modal" class="col-form-label"><?php echo $translations['html_title_professionals']; ?></label>
                            <select id="select_profesionales_modal" class="select_profesionales_modal">
                                <option value=""></option>
                            </select>
                        </div>  
                    </div>
                </div>
            </div>
            <div class="row col-md-12">
                <div class="div_append_days_container col-md-6 hide" style="max-height: 50vh;overflow-y: auto;">
                    
                </div>
                <div class="div_header_citas col-md-6 hide" style="max-height: 50vh;overflow-y: auto;">
                    <div id="" class="row">
                        <div class="col-md-4" style="padding-right:5px;">
                            <label for="input_hora_inicio" class="col-form-label"><?php echo $translations['html_starting_hour']; ?></label>
                            <input type="time" step="60" class="form-control input_hora_inicio" required>
                            <div class="invalid-feedback"><?php echo $translations['html_error_starting_hour']; ?></div>
                        </div>
                        <!-- Campo Nombre -->
                        <div class="col-md-4" style="padding-right:5px;">
                            <label for="input_hora_termino" class="col-form-label"><?php echo $translations['html_ending_hour']; ?></label>
                            <input type="time" step="60" class="form-control input_hora_termino" required disabled>
                            <div class="invalid-feedback"><?php echo $translations['html_error_ending_hour']; ?></div>
                        </div>
                        <div class="col-md-4 d-flex flex-column align-items-center" align="center">
                            <label for="input_hora_inicio" class="col-form-label"><?php echo $translations['html_options']; ?></label>
                            <button type="button" class="btn btn-outline-dark btn_add_service"><?php echo $translations['html_add_service']; ?></button>
                        </div>
                    </div>
                    <div class="row div_header_labels">
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_service']; ?></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_duration']; ?></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_price']; ?></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_option']; ?></label>
                        </div>
                    </div>
                    <div class="row div_header_servicios">
                    </div>
                    <div class="row div_header_total border-top" align="center">
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_totals']; ?>:</label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><span id="total_duracion">0</span> min</label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label total_costo">$<span id ="total_costo">0</span></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            
                        </div>
                    </div>
                </div>
            </div>
            
            <div id="alert_error" class="alert alert-danger align-items-center" role="alert" style="display:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div id="msg_error">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
        <button type="button" id="btnSave" class="btn btn-primary"><?php echo $translations['html_btn_save']; ?></button>
      </div>
    </div>
  </div>
</div>

<div id="template_days_container" class="container div_header_days_container container-calendar hide_container col-12 hide">
    <!-- Agenda -->
     <div class="titulo" align="center"></div>
    <div class="agenda-container" id="agenda-container">
        <!-- Header -->
        <div class="agenda-row agenda-header" id="agenda-header">
            <div class="agenda-time">Hora</div>
            <!-- Las columnas de profesionales se generarán dinámicamente aquí -->
        </div>
        <!-- Las filas de horas se generarán dinámicamente aquí -->
    </div>
</div>

<div id="template_servicio" class="row" style="display:none;">
    <div class="col-md-3" style="padding-right:5px;">
        <select class="select_servicios_modal" required>
            <option></option>
        </select>
        <div class="invalid-feedback"><?php echo $translations['html_error_service']; ?></div>
    </div>
    <div class="col-md-3" style="padding-right:5px;">
        <input type="number" class="form-control duracion" required/>
        <div class="invalid-feedback"><?php echo $translations['html_error_starting_hour']; ?></div>
    </div>
    <div class="col-md-3" style="padding-right:5px;" align="center">
        <span class="costo"></span>
        <div class="invalid-feedback"><?php echo $translations['html_error_starting_hour']; ?></div>
    </div>
    <div class="col-md-3" style="padding-right:5px;" align="center">
        <button type="button" class="btn btn-outline-dark btn_delete_servicio btn-close"></button>
    </div>
</div>

<script>
    let module_control_citas    = (function(){

        let busqueda_pruebas    = true;

        let draw            = 0;
        let count_hours     = 0;

        //  PERMISOS
        let registrar_pago  = "<?php echo $registrar_pago; ?>"

        let estatus_asistencia  = {
            0   : 'FALTA',
            1   : 'ASISTENCIA',
            2   : 'RETARDO',
            null    : 'Sin asignar' 
        };

        //  URL
        const controller    = '/Controlcitas';
        const url_index     = controller+"/index";

        //  language
        const translations  = {
            emptyTable: "<?= $translations['table_no_data'] ?>",
            info: "<?= $translations['showing_info'] ?>",
            infoEmpty: "<?= $translations['no_records'] ?>",
            search: "<?= $translations['search'] ?>",
            paginate: {
                first: "<?= $translations['paginate_first'] ?>",
                last: "<?= $translations['paginate_last'] ?>",
                next: "<?= $translations['paginate_next'] ?>",
                previous: "<?= $translations['paginate_previous'] ?>"
            },
            title_update    : "<?= $translations['html_edit_record'] ?>",
            title_delete    : "<?= $translations['html_delete_record'] ?>",
            title_preview   : "<?= $translations['html_preview_record'] ?>",
            title_change    : "<?= $translations['html_active_deactivate'] ?>",
            confirm_delete  : "<?= $translations['html_confirm_delete']?>",
            confirm_update  : "<?= $translations['html_confirm_update']?>",
            schedule_availability   : "<?= $translations['html_schedule_availability']?>",
            error_selected_location : "<?= $translations['error_selected_location']?>",
            error_professional      : "<?= $translations['html_error_professional']?>",
            error_selected_patient  : "<?= $translations['html_error_selected_patient']?>",
            error_starting_date     : "<?= $translations['html_error_starting_date']?>",
            appoinment_edit         : "<?= $translations['html_appoinment_edit']?>",
            cancel_appointment      : "<?= $translations['html_cancel_appointment']?>",
            register_payment        : "<?= $translations['html_register_payment']?>",
            pay                     : "<?= $translations['html_pay']?>",
            cancel_payment          : "<?= $translations['html_cancel_payment']?>",
        };

        // Variable global para almacenar la instancia de DataTable
        let table;

        //  dias_programacion_citas
        const dias_programacion_citas = <?php echo $dias_programacion_citas; ?>

        //  MARGEN DE MINUTOS PARA PERMITIR EMPALMADO
        const margen_minutos_empalmado_global   = <?php echo $margen_minutos_empalmado ?>;

        //  CODIGO PARA CALENDARIO POR SEMANA
        const diasSemana = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"];

        let rango_semana_actual = {
            'fecha_inicio'  : '',
            'fecha_termino' : ''
        };

        //  VARIABLES GLOBALES PARA NO MODIFICAR LA ESTRUCTURA DE LA AGENDA
        //  HORARIO INHABIL POR SEMANA
        let horario_no_disponible   = {};
        let citas_desglosadas       = {};
        let profesionales           = {};
        let tmp_citas_desglosadas   = {};
        //  RANGO DE HORARIO DE ATENCION
        let min_hora_inicio     = '';
        let max_hora_inicio     = '';
        let fechaActual         = '';
        let tmp_fecha_actual    = '';
        let cierre_agenda           = new Date(2025, 3, 30); // Año, Mes (0-indexed), Día
        let exist_apertura_agenda   = false;

        // Función para inicializar o recargar la tabla
        function cargarTabla() {
            
            draw    ++;
            if (!table) {
                table = new DataTable('#table_results', {
                    dom: 'lrtip',
                    paging: true,
                    info: true,
                    lengthChange: false,
                    language: translations,
                    ordering: false,
                    serverSide: true,
                    ajax: {
                        url     : url_index,
                        method  : 'POST',
                        data: function (d) {
                            d.pageSize  = d.length == null || d.length == '' ? 1 : d.length;
                            d.offset    = d.start == null || d.start == '' ? 0 : d.start;
                            d.draw      = draw;
                            d.accion    = 'get_rows';
                            d.from_catalog      = true;
                            d.get_servicios     = true;
                            d.id_locacion       = $("#select_locaciones").val();
                            d.id_profesional    = $("#select_profesionales").val();
                            d.id_paciente       = $("#select_pacientes").val();
                            d.fecha_inicio      = $("#input_rango_fecha_inicio").val();
                            d.fecha_termino     = $("#input_rango_fecha_termino").val();
                            d.tipo_busqueda     = $('input[name="filtro_citas"]:checked').val() || 'todas'; // Obtiene el valor del radio seleccionado
                            d.citas_pagadas     = $("#check_pagadas").prop('checked') == true ? 1 : 0;
                            d.citas_adeudo      = $("#check_adeudo").prop('checked') == true ? 1 : 0;
                        }
                    },
                    columns: [
                        { data: 'nombre_completo' }, // Columna 1
                        { data: 'nombre_profesional' }, // Columna 1
                        { data: 'num_servicios_costo' }, // Columna 1
                        { data: 'fecha_completa' }, // Columna 1
                        { data: 'label_pagada' }, // Columna 1
                        { data: 'estatus' }, // Columna 1
                        {
                            data: null, 
                            className: "text-center", // Centra el contenido de la celda
                            orderable: false, // Desactiva el ordenamiento para esta columna
                            render: function (data, type, row) {
                                draw    ++;
                                // `data` contiene el objeto completo de la fila
                                // Generamos un botón con un atributo dinámico para identificar la fila

                                let btn_preview = 
                                '<button class="btn btn-outline-dark btn-sm btn_preview" data-id="'+data['id']+'" title="'+translations['title_preview'] +'">' +
                                    '<i class="bi bi-search"></i> '+
                                '</button>';

                                let btn_update  = data['vencida'] == 1 || data['activa'] != 1 ? '' : 
                                '<button class="btn btn-outline-dark btn-sm btn_edit" data-id="'+data['id']+'" title="'+translations['appoinment_edit'] +'">' +
                                    '<i class="bi bi-pencil-fill"></i>'+
                                '</button>';

                                let btn_delete  = data['vencida'] == 1 || data['activa'] != 1 ? '' : 
                                '<button class="btn btn-outline-dark btn-sm btn_cancelar" data-id="'+data['id_agenda_cita']+'" title="'+translations['cancel_appointment'] +'">' +
                                    '<i class="bi bi-calendar-x"></i>'+
                                '</button>';

                                let btn_registrar_pago  = !registrar_pago || data['activa'] != 1 ? '' :
                                '<button class="btn btn-outline-dark btn-sm btn_registrar_pago" data-id="'+data['id_agenda_cita']+'" title="'+translations['register_payment'] +'">' +
                                    '<i class="bi bi-cash"></i>'+
                                '</button>';

                                return btn_preview + btn_update + btn_registrar_pago +btn_delete;
                            }
                        }
                    ],
                    createdRow: function (row, data, dataIndex) {
                        // Guardar el objeto completo en la fila como data
                        //console.log('data',data);
                        $(row).data('rowData', data);
                        if (data.activa == 0) {
                            $(row).find('td:eq(5)').css('background-color', '#fa7472'); // La sexta columna tiene índice 5
                        }

                        if (data.activa == 1) {
                            $(row).find('td:eq(5)').css('background-color', '#5be574'); // La sexta columna tiene índice 5
                        }
                    }
                });
            } else {
                draw    ++;
                table.ajax.reload();
            }
        }

        function show_modal_cancelar_cita(element){
            let modal_clone     = $("#modal_cancelar_cita").clone().removeAttr('id').show();
            let id_agenda_cita  = $(element).data('id');
            console.log('id_agenda_cita',id_agenda_cita);

            $(modal_clone).on('click','#btnSave',function(){
                let btn = $(this);
                $(btn).prop('disabled',true);
                const form = $(modal_clone).find('#form_modal_cancelar_cita')[0]; // Obtén el elemento DOM
                let flag_error  = false;
                if (form.checkValidity() === false) {
                    $(form).addClass('was-validated');
                    flag_error  = true;
                } else {
                    $(form).removeClass('was-validated');
                }

                if (flag_error){
                    $(btn).prop('disabled',false);
                    return false;
                }

                $.ajax({
                    url         : url_index,
                    method      : 'post',
                    dataType    : 'json',
                    data        : {
                        accion          : 'cancelar_cita',
                        id_motivo_cancelacion       : $(modal_clone).find("#select_motivo_cancelacion").val(),
                        observaciones_cancelacion   : $(modal_clone).find("#textarea_observaciones_cancelacion").val(),
                        id_agenda_cita              : $(element).data('id')
                    },
                    success     : function(data){
                        $(modal_clone).modal('hide');
                        showAlert('success','Cita cancelada');

                        $(modal_clone).find('#btnSave').prop('disabled',false);

                        if ("#input_rango_fecha_inicio" != null && $("#input_rango_fecha_inicio").val() != '' && $("#input_rango_fecha_termino").val() != null && $("#input_rango_fecha_termino").val() != ''){
                            cargarTabla();
                        }
                    },
                    error     : function(error){
                        console.log('error',error);
                        //$(modal_clone).find('#btnSave').prop('disabled',false);
                    }
                });
            });

            $(modal_clone).find('#select_motivo_cancelacion').select2({
                placeholder: 'Seleccione una opción',
                dropdownParent: $(modal_clone),
                width: '50px'
            });

            $(modal_clone).modal('show');
        }

        function fill_profesionales(id_locacion){
            $.ajax({
                url         : url_index,
                method      : 'post',
                data        : {
                    accion      : 'fill_profesionales',
                    id_locacion : id_locacion
                },
                success     : function(data){

                    $("#select_profesionales").val(null).trigger('change');
                    $("#select_profesionales").find('option').remove();

                    let options = '<option></option>';
                    for(let i in data){
                        options += '<option value="'+data[i]['id']+'">'+data[i]['nombre_completo']+'</option>';
                    }
                    
                    $("#select_profesionales").append(options);
                },
                error     : function(error){
                    $("#select_profesionales").val(null).trigger('change');
                    $("#select_profesionales").find('option').remove();
                    $("#select_profesionales").append('<option></option>');
                }
            })
        }

        function formatearFecha(fecha) {
            const opciones = { weekday: 'long', year: 'numeric', month: '2-digit', day: '2-digit' };
            const fechaFormateada = fecha.toLocaleDateString('es-ES', opciones);
            const partes = fechaFormateada.split(', ');
            
            function capitalizarPrimeraLetra(texto) {
                return texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();
            }

            if (partes.length > 1) {
                // Si la fecha incluye coma (formato "día, fecha")
                return capitalizarPrimeraLetra(partes[0]) + ', ' + partes[1];
            } else {
                // Si no hay coma, convertir la primera palabra (asumiendo que es el día)
                const palabras = fechaFormateada.split(' ');
                palabras[0] = capitalizarPrimeraLetra(palabras[0]);
                return palabras.join(' ');
            }
        }

        function formatearFechaExtensa(fechaStr) {
            if (!fechaStr) return '';

            // Separar fecha y hora
            const [fechaParte, horaParte] = fechaStr.split(' ');

            if (!fechaParte || !horaParte) return fechaStr; // Si no tiene formato esperado, devolver tal cual

            const [anio, mes, dia] = fechaParte.split('-');
            const [hora, minuto] = horaParte.split(':');

            // Retornar en formato más humano
            return `${dia}/${mes}/${anio} ${hora}:${minuto} hrs`;
        }

        function formatearDuracion(minutos) {
            if (isNaN(minutos) || minutos < 0) return '';

            const horas = Math.floor(minutos / 60);
            const minutosRestantes = minutos % 60;

            let resultado = '';

            if (horas > 0) {
                resultado += `${horas} hr${horas > 1 ? 's' : ''}`;
            }

            if (minutosRestantes > 0) {
                if (resultado) resultado += ' ';
                resultado += `${minutosRestantes} min`;
            }

            // Si dura exactamente 0 min
            if (resultado === '') {
                resultado = '0 min';
            }

            return resultado;
        }



        function show_info_cita(info_cita,registrar_pago = null){
            let modal_clone = $("#modal_info_cita").clone().show();
            $(modal_clone).find("#nombre_paciente").text(info_cita['nombre_completo']);
            $(modal_clone).find("#nombre_profesional").text(info_cita['nombre_profesional']);

            let split_today = info_cita['fecha_cita'].split('-');
            let fecha_cita  = new Date(parseInt(split_today[0]), parseInt(split_today[1]) - 1, parseInt(split_today[2]));

            $(modal_clone).find("#fecha_cita").text(formatearFecha(fecha_cita));
            $(modal_clone).find("#hora_cita").text(info_cita['hora_cita']);
            $(modal_clone).find("#duracion").text(formatearDuracion(info_cita['duracion']));
            $(modal_clone).find("#usuario_captura").text(info_cita['usuario_captura']);

            $(modal_clone).find("#asistencia").text(estatus_asistencia[info_cita['asistencia']]);
            $(modal_clone).find("#tipo_cita").text(info_cita['id_cita_programada'] != null ? 'CITA PROGRAMADA' : 'CITA ORDINARIA');
            $(modal_clone).find("#estatus").text(info_cita['estatus']);

            if (info_cita['activa'] != 1){
                $(modal_clone).find("#fecha_cancelacion").text(formatearFechaExtensa(info_cita['fecha_cancelacion']));
                $(modal_clone).find("#usuario_cancelacion").text(info_cita['usuario_cancelacion']);
                $(modal_clone).find("#motivo_cancelacion").text(info_cita['motivo_cancelacion']);
                $(modal_clone).find("#observaciones_cancelacion").text(info_cita['observaciones_cancelacion']);
                $(modal_clone).find('.div_info_cancelacion').removeClass('hide');
            }

            //  SE RECORREN LOS SERVICIOS
            for(let x in info_cita['servicios']){
                let servicio        = info_cita['servicios'][x];
                let row_servicio    = $("#template_servicio_cita_diaria").clone().removeAttr('id').addClass('d-flex').removeClass('hide');

                $(row_servicio).find('.servicio').text(servicio['nombre_servicio']);
                $(row_servicio).find('.duracion').text(servicio['duracion']);
                $(row_servicio).find('.costo').text(servicio['costo']);

                $(modal_clone).find('.div_header_servicios').append(row_servicio);
            }
            $(modal_clone).find('.total').text(info_cita['total']);

            if (registrar_pago != null){
                $(modal_clone).find('.hide_by_pay').hide();
                $(modal_clone).find('.show_by_pay').show();

                if (info_cita['pagada'] == 1){
                    $(modal_clone).find('.btn_registrar_pago').addClass('btn-danger').text(translations['cancel_payment']);
                    $(modal_clone).find('#pagada').text('SI');
                    $(modal_clone).find('#fecha_pago').text(info_cita['fecha_pago']);
                    $(modal_clone).find('#forma_pago').text(info_cita['forma_pago']);
                    $(modal_clone).find(".div_forma_pago").hide();
                } else {
                    $(modal_clone).find('.btn_registrar_pago').addClass('btn-success').text(translations['pay']);
                    $(modal_clone).find('#pagada').text('NO');
                    $(modal_clone).find('#fecha_pago').text('S/A');
                    $(modal_clone).find('#forma_pago').text('S/A');
                }

                $(modal_clone).on('click','.btn_registrar_pago',function(){
                    let btn = $(this);
                    $(btn).prop('disabled',true);
                    $.ajax({
                        url     : url_index,
                        method  : 'post',
                        data    : {
                            accion          : info_cita['pagada'] == 1 ? 'cancelar_pago' : 'capturar_pago',
                            id_agenda_cita  : info_cita['id_agenda_cita'],
                            forma_pago      : $(modal_clone).find('[name="forma_pago"]:checked').val(),
                            info_cita       : info_cita
                        },
                        success : function(data){
                            $(modal_clone).modal('hide');
                            showAlert('success','Captura exitosa!');
                            if ("#input_rango_fecha_inicio" != null && $("#input_rango_fecha_inicio").val() != '' && $("#input_rango_fecha_termino").val() != null && $("#input_rango_fecha_termino").val() != ''){
                                cargarTabla();
                            }

                        },
                        error   : function(error){
                            $(btn).prop('disabled',false);
                            console.log('error');
                            //console.log(error);
                            actionJsonError(error,btn);
                        }
                    });
                });
            }

            $(modal_clone).modal('show');
        }

        function get_rango_semana(fechaString) {
            let año, mes, dia;

            if (fechaString instanceof Date) {
                // Si es un objeto Date, extraer los valores directamente
                año = fechaString.getFullYear();
                mes = fechaString.getMonth() + 1; // Meses van de 0 a 11
                dia = fechaString.getDate();
            } else {
                // Si es string, parsearlo
                [año, mes, dia] = fechaString.split("-").map(Number);
            }

            const fechaObj = new Date(año, mes - 1, dia);

            const diaSemana = fechaObj.getDay();

            const lunes = new Date(fechaObj);
            lunes.setDate(fechaObj.getDate() - (diaSemana === 0 ? 6 : diaSemana - 1));

            const domingo = new Date(fechaObj);
            domingo.setDate(fechaObj.getDate() + (diaSemana === 0 ? 0 : 7 - diaSemana));

            const formatoFecha = (fecha) => {
                const y = fecha.getFullYear();
                const m = String(fecha.getMonth() + 1).padStart(2, '0');
                const d = String(fecha.getDate()).padStart(2, '0');
                return `${y}-${m}-${d}`;
            };

            rango_semana_actual['fecha_inicio'] = formatoFecha(lunes);
            rango_semana_actual['fecha_termino'] = formatoFecha(domingo);
        }

        //  AJAX PARA OBTENER TODA LA INFOMACION DE LAS CITAS
        function ajax_previo_show_modal(data_cita,data_ajax){
            // let valida_fechas   = validar_fechas_apertura_agenda(fechaActual);
            // if (valida_fechas != true){
            //     showAlert('danger',valida_fechas);
            //     return false;
            // }
            let split_today     = data_cita['fecha_cita'].split('-');
            fechaActual         = new Date(parseInt(split_today[0]), parseInt(split_today[1]) - 1, parseInt(split_today[2]));
            let fecha_actual    = formatearFecha(fechaActual);
            fecha_actual        = fecha_actual.split(",");
            let hora_inicio     = data_cita['start']; //$(element).closest('.row_info').find('.agenda-time').text();
            let tmp_cierre_fecha    = data_ajax['cierre_agenda']['last_fecha_limite'];
            tmp_cierre_fecha        = data_ajax['cierre_agenda']['last_fecha_limite'].split('-');
            cierre_agenda           = new Date(tmp_cierre_fecha[0],tmp_cierre_fecha[1] - 1,tmp_cierre_fecha[2]);
            exist_apertura_agenda   = data_ajax['cierre_agenda']['has_record'];

            // if ($(element).hasClass('no-hover-effect')){
            //     return false;
            // }

            let anio    = fechaActual.getFullYear();
            let mes     = String(fechaActual.getMonth() + 1).padStart(2, '0'); // Los meses van de 0 a 11
            let dia     = String(fechaActual.getDate()).padStart(2, '0');

            // Formatear la fecha como 'YYYY-MM-DD'
            let fechaFormateada = `${anio}-${mes}-${dia}`;
            const id_profesional    = data_cita['id_profesional'];
            const id_agenda_cita    = data_cita['id_agenda_cita']
            let profesional = data_ajax['all_professionals'].find(row => row.id == id_profesional);
            let obj_data    = {
                citas_paciente      : {},
                citas_programadas   : {},
                rango_no_disponible : profesional['rango_no_disponible'],
                servicios           : profesional['servicios'],
                info_cita           : data_cita,
                info_ajax           : data_ajax,
                horario_atencion    : data_ajax['horario_atencion']
            };

            show_modal_citas(id_agenda_cita,hora_inicio,obj_data,id_profesional);
        }

        //  CALCULA EL TOTAL DE DURACION Y COSTO POR CITA
        function calcula_totales(modal_clone,id_profesional,id_agenda_cita = -1){
            //  TOTALES
            let total_duracion  = 0;
            let total_costo     = 0;

            $(modal_clone).find('.header_servicio').each(function(){
                let val_duracion    = $(this).find('.duracion').val() != null && $(this).find('.duracion').val() != '' ? $(this).find('.duracion').val() : 0;
                let val_costo       = $(this).find('.costo').text() != null && $(this).find('.costo').text() != '' ? $(this).find('.costo').text() : 0;
                total_duracion      = parseInt(total_duracion) + parseInt(val_duracion);
                total_costo         = (parseFloat(total_costo) + parseFloat(val_costo)).toFixed(2);
            });

            $(modal_clone).find('#total_duracion').text(total_duracion);
            $(modal_clone).find('#total_costo').text(total_costo);
            let segundo_apellido    = $(modal_clone).find('#input_segundo_apellido').val() != null && $(modal_clone).find('#input_segundo_apellido').val() != '' ? $(modal_clone).find('#input_segundo_apellido').val() : ''; 
            let nombre_completo     = $(modal_clone).find('#input_primer_apellido').val() + ' ' + segundo_apellido +' '+$(modal_clone).find('#input_nombre').val()
            nombre_completo         = nombre_completo.trim();
            
            if (nombre_completo == ''){
                nombre_completo = 'S/N';
            }

            //  SE CALCULA LA HORA DE TERMINO
            let input_hora_inicio   = $(modal_clone).find('.input_hora_inicio').val();
            if ($(modal_clone).find('.input_hora_inicio').val() != null && $(modal_clone).find('.input_hora_inicio').val() != ''){
                let hora_inicio = verificarHoraInicio(modal_clone,input_hora_inicio,sumarUnMinuto(input_hora_inicio,total_duracion),id_agenda_cita,total_duracion,false);
                if (hora_inicio['excede_horario'] == true){
                    showAlert('danger','El valor ingresado esta fuera del horario de atenci&oacute;n');
                    $(modal_clone).find('.input_hora_inicio').val('');
                    $(modal_clone).find('.input_hora_termino').val('');
                    return false;
                } else {
                    if (input_hora_inicio != hora_inicio['hora_termino_empalmado']){
                        $(modal_clone).find('.input_hora_inicio').val(hora_inicio['hora_termino_empalmado']);
                        input_hora_inicio   = hora_inicio['hora_termino_empalmado'];
                    }
                }
                
                $(modal_clone).find('.input_hora_termino').val(sumarUnMinuto(input_hora_inicio,total_duracion));
                let profesional = profesionales.find(row => row.id == id_profesional);
                console.log('profesionales a pintar',profesionales);
                let text_day    = formatearFecha(fechaActual);
                text_day        = text_day.split(",")[0];
                let evento  = {
                    start   : $(modal_clone).find('.input_hora_inicio').val(),
                    end     : $(modal_clone).find('.input_hora_termino').val(),
                    day     : text_day,
                    nombre_completo : nombre_completo,
                    nombre_profesional  : profesional['nombre_completo'],
                    id_agenda_cita      : id_agenda_cita,
                    duracion            : total_duracion,
                    asistencia          : 1,
                    id_profesional      : id_profesional * 1
                };
                
                //  SE BORRA EL REGISTREO ACTUAL -1 
                $(modal_clone).find('.flot_cita').each(function(){
                    if ($(this).data('idagendacita') == id_agenda_cita){
                        $(this).remove();
                        return false;
                    }
                });
                console.log('evento obj',evento);
                cuadroFlotantesDiario(modal_clone,evento,background_tipo_cita(evento),'flot_cita',null,true);
            }
        }

        function show_modal_citas(id_agenda_cita = null,hora_default = null,info_profesional,id_profesional){
            let modal_clone             = $("#modal_save_class").clone().show();
            let min_hora_inicio_modal   = '';
            let max_hora_inicio_modal   = '';
            let id_template_cita        = '';  
            tmp_fecha_actual            = fechaActual;

            console.log('fechaActual',fechaActual);

            console.log('info_profesional',info_profesional);
            citas_desglosadas       = info_profesional['info_ajax']['citas_agendadas'];
            profesionales           = info_profesional['info_ajax']['all_professionals'];
            min_hora_inicio         = info_profesional['info_ajax']['min_hora_inicio'];
            max_hora_inicio         = info_profesional['info_ajax']['max_hora_inicio'];
            horario_no_disponible   = info_profesional['info_ajax']['rangos_no_incluidos'];

            //  SE CREAN LOS TEMPLATES POR HORARIO DE ATENCION
            let horario_atencion    = info_profesional['horario_atencion'];
            let first_row           = true;
            let diaActual           = fechaActual.getDay();
            for (let i in horario_atencion) {
                let info_horario = horario_atencion[i];
                console.log('info_horario',info_horario);
                let diasPermitidos = info_horario['dias'].map(d => d.dia); // Extrae solo los números

                if (!diasPermitidos.includes(diaActual)) {
                    continue;
                }

                let template_days_container = $("#template_days_container").clone()
                    .removeAttr('id')
                    .attr('id', 'div_days_' + info_horario['id'])
                    .data('idhorarioatencion', info_horario['id'])
                    .removeClass('hide');

                $(template_days_container).find('.titulo').text(info_horario['titulo']);

                print_modal_info_cita(
                    modal_clone,
                    template_days_container,
                    info_horario['intervalo_citas'],
                    info_horario['min_hora_inicio'],
                    info_horario['max_hora_termino'],
                    id_profesional,
                    info_horario['rangos_no_incluidos'],
                    id_agenda_cita,
                    first_row,
                    info_profesional['info_cita']
                );

                first_row = false;
                $(modal_clone).find('.div_append_days_container').append(template_days_container);
            }
            //  ASIGNACION DE VARIABLES GLOBALES
            

            //  CITAS POR DIA
            tmp_citas_desglosadas   = citas_desglosadas.map(obj => ({ ...obj }));

            if (id_agenda_cita != null){
                $(modal_clone).find('#select_profesionales_modal').removeAttr('required');

                //  SE LLENA COMBO DE PROFESIONALES
                let options     = '<option></option>';
                let selected    = '';
                for(let i in profesionales){
                    let tmp_profesional = profesionales[i];
                    selected    = tmp_profesional["id"] == info_profesional['info_cita']['id_profesional'] ? 'selected' : '';
                    options += '<option value="'+tmp_profesional["id"]+'" '+selected+'>'+tmp_profesional["nombre_completo"]+'</option>';
                }

                $(modal_clone).find('#select_profesionales_modal').find('option').remove();
                $(modal_clone).find('#select_profesionales_modal').append(options);

                $(modal_clone).find('#select_profesionales_modal').select2({
                    placeholder: 'Seleccione una opción',
                    dropdownParent: $(modal_clone),
                    width: '50px'
                }).on('select2:select',function(){
                    //  SE OBTIENE LA INFORMACION DEL PROFESIONAL
                    let id  = $(this).val();
                    let check_profesional   = profesionales.find(row => row.id == id);
                    console.log('check_profesional',check_profesional);
                    let tmp_servicios   = check_profesional['servicios'];

                    //  SE VERIFICA SI LOS SERVICIOS QUE TIENE ACTUALMENTE EL PACIENTE
                    //  LOS CUBRE EN SU TOTALIDAD EL NUEVO PROFESIONAL
                    let flag_cumple_servicios   = true;
                    $(modal_clone).find('.header_servicio').find(".select_servicios_modal").each(function(){
                        if ($(this).val() == null || $(this).val() == ''){
                            return true;
                        }

                        let flag_exist  = false;
                        for(let i in tmp_servicios){
                            if (tmp_servicios[i]['id_servicio'] == $(this).val()){
                                flag_exist  = true;
                                break;
                            }
                        }

                        if (!flag_exist){
                            flag_cumple_servicios   = false;
                            return false;
                        }
                    });

                    if (!flag_cumple_servicios){
                        showAlert('danger','El profesional seleccionado no cumple con todos los servicios requeridos en esta cita');
                        console.log('actual id_prof',info_profesional['info_cita']['id_profesional']);
                        $(modal_clone).find('#select_profesionales_modal').val(info_profesional['info_cita']['id_profesional']);
                        $(modal_clone).find('#select_profesionales_modal').trigger('change');
                        $(modal_clone).find('#select_profesionales_modal').trigger('select2:select');
                        return false;
                    }

                    //  AL PASAR SIGNIFICA QUE EL PROFESIONAL CUMPLE CON LOS SERVICIOS REQUERIDOS
                    console.log("combo",check_profesional['rango_no_disponible']);
                    print_modal_info_cita(modal_clone,min_hora_inicio,max_hora_inicio,id,check_profesional['rango_no_disponible'],id_agenda_cita,false,info_profesional['info_cita']);
                });
            }
            
            $(modal_clone).on('click','#input_modify_day',function(){
                let is_checked  = $(this).prop('checked');

                if (is_checked){
                    $(modal_clone).find('.div_cambiar_dia').show();
                } else {
                    $(modal_clone).find('.div_cambiar_dia').hide();
                    //  SE REHACE LA INFORMACION DEL DIV DE FECHA
                    // Tu código aquí
                    fechaActual = tmp_fecha_actual;

                    //  SE SELECCIONA NUEVAMENTE EL PROFESIONAL
                    $(modal_clone).find("#select_profesionales_modal").val(info_profesional['info_cita']['id_profesional']).trigger('change');

                    //  CITAS POR DIA
                    citas_desglosadas   = tmp_citas_desglosadas.map(obj => ({ ...obj }));

                    //  SE BORRAN LOS DIV FLOTANTES
                    $(modal_clone).find('.evento-flotante').remove();
                    
                    horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'no_disponible',null,true));
                    citas_desglosadas.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'flot_cita',null));
                    show_horario_no_disponible_profesional($(modal_clone));
                    setTimeout(function(){
                        cambiarDia(null, fechaActual,$(modal_clone));
                        $(modal_clone).find('.input_hora_inicio').val($(modal_clone).find('.input_hora_inicio').data('hora'))
                        calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                    },50);
                }
            });

            //  EVENTOS DIV DE DIAS
            // Eventos para los botones de navegación
            $(modal_clone).find("#btn-anterior").on("click", function(){
                cambiarDia(-1,null,$(modal_clone));
                console.log('entre funciones');
                setTimeout(calcula_totales(modal_clone,id_profesional,id_agenda_cita),50);
            });
            $(modal_clone).find("#btn-siguiente").on("click", function(){
                cambiarDia(1,null,$(modal_clone));
                console.log('entre funciones');
                setTimeout(calcula_totales(modal_clone,id_profesional,id_agenda_cita),50);
            });

            $(modal_clone).find("#btn-hoy").on('click',function(){
                // Tu código aquí
                fechaActual = tmp_fecha_actual;

                //  CITAS POR DIA
                citas_desglosadas   = tmp_citas_desglosadas.map(obj => ({ ...obj }));

                //  SE BORRAN LOS DIV FLOTANTES
                $(modal_clone).find('.evento-flotante').remove();
                
                horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'no_disponible',null,true));
                citas_desglosadas.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'flot_cita',null));
                show_horario_no_disponible_profesional($(modal_clone));
                setTimeout(function(){
                    cambiarDia(null, fechaActual,$(modal_clone));
                    $(modal_clone).find('.input_hora_inicio').val($(modal_clone).find('.input_hora_inicio').data('hora'))
                    calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                },50);
            });

            // Eventos para cambiar semana
            $(modal_clone).find("#btn-semana-anterior").on("click", () => cambiarSemana(-1,$(modal_clone)));
            $(modal_clone).find("#btn-semana-siguiente").on("click", () => cambiarSemana(1,$(modal_clone)));


            $(modal_clone).on('click','.btn_add_service',function(){
                let div_clone   = $("#template_servicio").clone().removeAttr('id').addClass('header_servicio').show();

                //codigo de prueba
                $(div_clone).find('.select_servicios_modal').find('option').remove();
                $(div_clone).find('.select_servicios_modal').append('<option></option>');
                for(let i in info_profesional['servicios']){
                    let service = info_profesional['servicios'][i];

                    let option  = '<option value="'+service["id_servicio"]+'" data-duracionminutos="'+service['duracion_minutos'] +'" data-duracion="'+service['duracion'] +'" data-costo="'+service['costo'] +'">'+service["nombre"]+'</option>'
                    $(div_clone).find('.select_servicios_modal').append(option);

                }

                $(div_clone).find('.select_servicios_modal').select2({
                    placeholder: 'Seleccione una opción',
                    dropdownParent: $(modal_clone),
                    width: '50px'
                }).on('select2:select',function(){
                    let duracion    = $(this).find('option:selected').data('duracionminutos');
                    let costo       = $(this).find('option:selected').data('costo');

                    $(this).closest('.header_servicio').find('.duracion').val(duracion);
                    $(this).closest('.header_servicio').find('.costo').text(costo);

                    calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                });

                $(modal_clone).find('.div_header_servicios').append(div_clone);
            });

            $(modal_clone).on('mouseenter','.evento-flotante',function() {
                $(modal_clone).find('.agenda-hours').addClass('no-hover-effect');
            });

            $(modal_clone).on('mouseleave','.evento-flotante', function() {
                $(modal_clone).find('.agenda-hours').removeClass('no-hover-effect');
            });

            $(modal_clone).on('click','.btn_delete_servicio',function(){
                $(this).closest('.header_servicio').remove();
                calcula_totales(modal_clone,id_profesional,id_agenda_cita);
            });

            let cadena_enviada  = '';
            $(modal_clone).find('#select_paciente_modal').select2({
                placeholder: 'Seleccione una opción',
                dropdownParent: $(modal_clone),
                width: '50px',
                minimumInputLength: 5,
                ajax: {
                    url: url_index,
                    method: 'post',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        cadena_enviada  = params.term;
                        return {
                            accion: 'fill_combo',
                            cadena: params.term
                        };
                    },
                    processResults: function (data) {
                        // Aquí adaptamos la respuesta al formato que select2 necesita
                        return {
                            results: data.map(function (item) {
                                return {
                                    id: item.id,
                                    text: item.celular + ' - ' + item.nombre_completo,
                                    nombre: item.nombre,
                                    primer_apellido: item.primer_apellido,
                                    segundo_apellido: item.segundo_apellido,
                                    celular: item.celular
                                };
                            })
                        };
                    },
                    cache: true
                }
            }).on('select2:select', function (e) {
                // Acción al seleccionar una opción
                let data            = e.params.data;
                let input_disabled  = true;
                //  SI ES -1 SIGNIFICA QUE QUIERE AGREGAR UN NUEVO REGISTRO
                if (data.id == -1){
                    input_disabled  = false;
                    if(!isNaN(cadena_enviada)){
                        data.celular    = cadena_enviada;
                    }
                }

                $(modal_clone).find('.div_datos_paciente').find('#input_celular').val(data.celular);
                $(modal_clone).find('.div_datos_paciente').find('#input_nombre').val(data.nombre);
                $(modal_clone).find('.div_datos_paciente').find('#input_primer_apellido').val(data.primer_apellido);
                $(modal_clone).find('.div_datos_paciente').find('#input_segundo_apellido').val(data.segundo_apellido);
                $(modal_clone).find('.div_datos_paciente').show().find('input').prop('disabled',input_disabled);

                if ($(modal_clone).find('.select_servicios_modal').val() != null && $(modal_clone).find('.select_servicios_modal').val() != ''){
                    calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                }
                
            });

            $(modal_clone).on('click','#btn_add_appoitment',function(){
                count_id_citas  ++;

                let row_cita    = $("#template_cita").clone().removeClass('hide').attr('id','id_horario_cita_'+count_id_citas);
                $(row_cita).find('.span_duracion').text($(modal_clone).find('#select_servicios_modal').find('option:selected').data('duracionminutos')+' Min.');

                $(row_cita).find('.select_dias').select2({
                    placeholder: 'Seleccione una opción',
                    dropdownParent: $(modal_clone),
                    width: '50px'
                });

                $(modal_clone).find('.div_header_citas').append(row_cita);
            });

            $(modal_clone).on('blur', '.input_hora_inicio', function() {
                //@TODO OBTENER LA HORA INICIO ANTERIOR EN CASO DE EXISTIR EMPALMADOS
                const valor = $(this).val(); // Obtener el valor del input
                const patron = /^([01]\d|2[0-3]):([0-5]\d)$/; // Expresión regular para validar HH:MM

                // Validar el formato de la hora
                let input_termino_val   = $(modal_clone).find('.input_hora_termino').val();
                if (patron.test(valor)) {
                    //  SE BUSCA QUE EXISTA AL MENOS UN VALOR DE SERVICIO ELEGIDO
                    let flag_servicio   = false;
                    $(modal_clone).find('.header_servicio').each(function(){
                        if ($(this).find('.select_servicios_modal').val() != null && $(this).find('.select_servicios_modal').val() != ''){
                            flag_servicio   = true;
                            return false;
                        }
                    });
                    // Ejecutar la función solo si el formato es correcto
                    if (flag_servicio){
                        calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                    }
                }
            });

            $(modal_clone).on('blur', '.duracion', function() {
                calcula_totales(modal_clone,id_profesional,id_agenda_cita);
            });

            $(modal_clone).on('blur', '.input_nombres', function() {
                if ($(modal_clone).find('.input_hora_termino').val() != null && $(modal_clone).find('.input_hora_termino').val() != ''){
                    calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                }
            });

            //  GUARDAR CITA
            $(modal_clone).on('click','#btnSave',function(){
                console.log('aqui clic');
                let btn = $(this);
                $(btn).prop('disabled',true);
                const form = $(modal_clone).find('#form_modal_create')[0]; // Obtén el elemento DOM
                let flag_error  = false;
                
                if (!form.checkValidity()) {
                    $(form).addClass('was-validated');
                    flag_error = true;

                    // Revisar cada campo que sea inválido
                    const invalidFields = Array.from(form.elements).filter(el => !el.validity.valid);

                    invalidFields.forEach(field => {
                        console.log('Campo inválido:', field.name || field.id, field.validationMessage);
                    });
                } else {
                    $(form).removeClass('was-validated');
                }

                if (flag_error){
                    $(btn).prop('disabled',false);
                    return false;
                }

                console.log('pase 1');

                //  VALIDAR ESTRUCTURA DE DATOS
                if (parseInt($(modal_clone).find('#input_celular').val().length) != parseInt(10)){
                    $(modal_clone).find('#alert_error').find('#msg_error').html(error_list['error_celular']);
                    $(modal_clone).find('#alert_error').addClass('d-flex').show();
                    $(btn).prop('disabled',false);
                    return false;
                } else {
                    $(modal_clone).find('#alert_error').removeClass('d-flex').hide();
                }

                //  SE VALIDA QUE NO EXISTAN HORAS EMPALMADAS

                let obj_info        = {
                    id_agenda_cita      : id_agenda_cita,
                    id_paciente         : null,
                    celular             : null,
                    primer_apellido     : null,
                    segundo_apellido    : null,
                    nombre              : null,
                    servicios           : [],
                    accion              : null
                };
                
                $(modal_clone).find('.header_servicio').each(function(){
                    obj_info.servicios.push({
                        id_servicio : $(this).find('.select_servicios_modal').val(),
                        duracion    : $(this).find('.duracion').val(),
                        costo       : $(this).find('.costo').text(),
                    });
                });

                if (id_agenda_cita == null){
                    obj_info['accion']  = 'crear_cita';
                    if ($(modal_clone).find('#select_paciente_modal').val() == -1){
                        obj_info.celular          = $(modal_clone).find('#input_celular').val();
                        obj_info.primer_apellido  = $(modal_clone).find('#input_primer_apellido').val();
                        obj_info.segundo_apellido = $(modal_clone).find('#input_segundo_apellido').val();
                        obj_info.nombre           = $(modal_clone).find('#input_nombre').val();
                    } else {
                        obj_info.id_paciente    = $(modal_clone).find('#select_paciente_modal').val();
                    }
                } else {
                    obj_info['accion']  = $(modal_clone).find('#input_modify_day').prop('checked') ? 'reagendar_cita' : 'modificar_cita';
                }
                
                console.log('pase 2')
                obj_info.id_profesional = $(modal_clone).find("#select_profesionales_modal").val();
                obj_info.id_locacion    = $("#select_locaciones").val();
                
                //  OBTENER FECHA DE LA CITA
                let fecha_actual    = formatearFecha(fechaActual);
                fecha_actual        = fecha_actual.split(",");
                obj_info.fecha_cita = fecha_actual[1].trim();
                obj_info.dia        = diasSemana.indexOf(fecha_actual[0]) + 1;
                obj_info.hora_inicio    = $(modal_clone).find('.input_hora_inicio').val();
                obj_info.hora_termino   = $(modal_clone).find('.input_hora_termino').val();

                console.log('obj_info');
                console.log(obj_info);
                //return false;

                $.ajax({
                    url         : url_index,
                    method      : 'post',
                    data        : {
                        obj_info    : obj_info,
                        accion      : 'save_appoinment'
                    },
                    success : function(data){
                        // Tu código aquí
                        fechaActual = tmp_fecha_actual;

                        //  CITAS POR DIA
                        citas_desglosadas       = tmp_citas_desglosadas.map(obj => ({ ...obj }));
                        $(btn).prop('disabled',false);
                        $(modal_clone).modal('hide');
                        showAlert('success',data);
                        $("#btnBuscar").trigger('click');

                    },
                    error : function(error){
                        $(btn).prop('disabled',false);
                        console.log('error');
                        //console.log(error);
                        actionJsonError(error,btn);
                    }
                });
            });

            //print_modal_info_cita(modal_clone,min_hora_inicio,max_hora_inicio,id_profesional,info_profesional['rango_no_disponible'],id_agenda_cita,true,info_profesional['info_cita']);

            if ($(modal_clone).find('.header_servicio').length == 0){
                $(modal_clone).find('.btn_add_service').trigger('click');
            }

            $(modal_clone).on('click','.agenda-hours',function(){
                if ($(this).hasClass('no-hover-effect')){
                    return false;
                }
                let hora_inicio     = $(this).closest('.row_info').find('.agenda-time').text();
                let duracion    = $(modal_clone).find("#total_duracion").text();

                duracion        = duracion == 0 || duracion == '' || duracion == null ? 5 : duracion;
                hora_inicio = verificarHoraInicio(modal_clone,hora_inicio,sumarUnMinuto(hora_inicio,duracion),id_agenda_cita,duracion,true);

                if (hora_inicio['excede_horario']){
                    hora_inicio['hora_termino_empalmado']   = $(modal_clone).find('.input_hora_inicio').val();
                }
                $(modal_clone).find('.input_hora_inicio').val(hora_inicio['hora_termino_empalmado']);

                if ($(modal_clone).find('.select_servicios_modal').val() != null && $(modal_clone).find('.select_servicios_modal').val() != ''){
                    calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                }
                
            });

            $(modal_clone).find('.hide').removeClass('hide');
            $(modal_clone).find('.hide_container').removeClass('hide_container');
            $(modal_clone).modal('show');
        }

        $(document).ready(function() {

            // $("#input_rango_fecha_inicio").val('2025-06-21');
            // $("#input_rango_fecha_termino").val('2025-06-30');
            
            // Initialize the select elements
            $('.select_locaciones').select2({
                placeholder: translations['error_selected_location']
            });

            if ($("#select_locaciones").val() != null && $("#select_locaciones").val() != ''){
                fill_profesionales($("#select_locaciones").val());
            }

            $('.select_profesionales').select2({
                placeholder: translations['error_professional'],
                allowClear: true
            });

            $('#select_pacientes').select2({
                placeholder: translations['error_selected_patient'],
                width: '50px',
                minimumInputLength: 5,
                allowClear : true,
                ajax: {
                    url: url_index,
                    method: 'post',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        cadena_enviada  = params.term;
                        return {
                            accion: 'fill_combo',
                            cadena: params.term
                        };
                    },
                    processResults: function (data) {
                        // Aquí adaptamos la respuesta al formato que select2 necesita
                        return {
                            results: data.map(function (item) {
                                if (item.id == -1) return true;
                                return {
                                    id: item.id,
                                    text: item.celular + ' - ' + item.nombre_completo,
                                    nombre: item.nombre,
                                    primer_apellido: item.primer_apellido,
                                    segundo_apellido: item.segundo_apellido,
                                    celular: item.celular
                                };
                            })
                        };
                    },
                    cache: true
                }
            });

            // EVENTO PARA BUSCAR CITAS
            $('#btnBuscar').on('click', function() {
                if (($('#input_rango_fecha_inicio').val() == '' || $('#input_rango_fecha_inicio').val() == null) && ($('#input_rango_fecha_termino').val() == '' || $('#input_rango_fecha_termino').val() == null)) {
                    showAlert('danger', translations['error_starting_date']);
                    return false;
                }

                if ($('#input_rango_fecha_termino').val() == '') {
                    showAlert('danger', translations['error_starting_date']);
                    return false;
                }
                cargarTabla();
            });

            //  EVENTOS PARA APERTURA DE AGENDA
            $("#btn_agenda_opening").on('click',function(){
                let modal_clone = $("#modal_agenda_opening").clone().show();

                // Aplica select2 solo al nuevo select
                $(modal_clone).find('.select_locaciones_modal').select2({
                    placeholder : 'Seleccione una opción',
                    allowClear  : false,
                    dropdownParent: $(modal_clone),
                    width: '50px'
                }).on('select2:select',function(){
                    const id_locacion   = $(this).val();
                    $.ajax({
                        url     : url_index,
                        method  : 'post',
                        data    : {
                            accion      : 'get_date',
                            id_locacion : id_locacion
                        },
                        success     : function(data){
                            console.log('data');
                            console.log(data);

                            $(modal_clone).find('#input_fecha_inicio').prop('disabled',false).attr('min' , data['fecha_actual']).val(data['last_fecha_limite']).trigger('change');
                            $(modal_clone).find('#input_fecha_termino').attr('min' , data['fecha_actual']).prop('disabled',false);
                        },
                        error       : function(error){
                            actionJsonError(error,btn);
                        }
                    })
                });

                if ($(modal_clone).find('.select_locaciones_modal').val() != '' && $(modal_clone).find('.select_locaciones_modal') != null){
                    const id_locacion   = $(modal_clone).find('.select_locaciones_modal').val();
                    $.ajax({
                        url     : url_index,
                        method  : 'post',
                        data    : {
                            accion      : 'get_date',
                            id_locacion : id_locacion
                        },
                        success     : function(data){
                            console.log('data');
                            console.log(data);

                            $(modal_clone).find('#input_fecha_inicio').prop('disabled',false).attr('min' , data['fecha_actual']).val(data['last_fecha_limite']).trigger('change');
                            $(modal_clone).find('#input_fecha_termino').attr('min' , data['fecha_actual']).prop('disabled',false);
                        },
                        error       : function(error){
                            actionJsonError(error,btn);
                        }
                    })
                }

                $(modal_clone).on('change','#input_fecha_inicio',function(){
                    // Cadena de texto con la fecha en formato DD/MM/YYYY
                    const fechaStr = $(this).val();

                    // Dividir la cadena en día, mes y año
                    const [anio, mes, dia] = fechaStr.split('-');

                    // Crear un objeto Date (los meses en JavaScript son base 0, por eso restamos 1 al mes)
                    const fecha = new Date(anio, mes - 1, dia);

                    // Sumar 31 días
                    fecha.setDate(fecha.getDate() + parseInt(dias_programacion_citas));
                    let [nuevo_dia, nuevo_mes, nuevo_anio]  = fecha.toLocaleDateString().split('/');
                    nuevo_mes   = nuevo_mes.length == 1 ? '0'+nuevo_mes : nuevo_mes;
                    nuevo_dia   = nuevo_dia.length == 1 ? '0'+nuevo_dia : nuevo_dia;


                    // Mostrar la nueva fecha en formato local
                    $(modal_clone).find('#input_fecha_termino').val(nuevo_anio+'-'+nuevo_mes+'-'+nuevo_dia);
                });

                $(modal_clone).on('click','#btnSave',function(){
                    let btn =  $(this);
                    $(btn).prop('disable',true);

                    const form = $(modal_clone).find('#form_modal_agenda_opening')[0]; // Obtén el elemento DOM
                    let flag_error  = false;
                    if (form.checkValidity() === false) {
                        $(form).addClass('was-validated');
                        flag_error  = true;
                    } else {
                        $(form).removeClass('was-validated');
                    }

                    let fecha_inicio    = $(modal_clone).find('#input_fecha_inicio').val();
                    let fecha_termino   = $(modal_clone).find('#input_fecha_termino').val();

                    // Convertir las cadenas a objetos Date
                    fecha_inicio    = new Date(fecha_inicio);
                    fecha_termino   = new Date(fecha_termino);

                    //  VALIDAR REGISTROS
                    if (fecha_inicio > fecha_termino){
                        $(modal_clone).find('#alert_error').find('#msg_error').html(error_list['error_range_date']);
                        $(modal_clone).find('#alert_error').addClass('d-flex').show();
                        return false;
                    }

                    if(flag_error){
                        return false;
                    }

                    let obj_info    = {
                        id_locacion     : $(modal_clone).find('#select_locaciones_modal').val(),
                        nombre_locacion : $(modal_clone).find('#select_locaciones_modal').find('option:selected').text(),
                        fecha_inicio    : $(modal_clone).find('#input_fecha_inicio').val(),
                        fecha_termino   : $(modal_clone).find('#input_fecha_termino').val(),
                    };

                    console.log('obj_info');
                    console.log(obj_info);
                    //return false;

                    //  AJAX SAVE
                    $.ajax({
                        url         : url_index,
                        method      : 'POST',
                        dataType    : 'json',
                        data        : {
                            accion      : 'save_agenda_opening',
                            obj_info    : obj_info
                        },
                        success     : function(data){
                            $(btn).prop('disabled',false);
                            $(modal_clone).modal('hide');
                            showAlert('success',data);
                            if ("#input_rango_fecha_inicio" != null && $("#input_rango_fecha_inicio").val() != '' && $("#input_rango_fecha_termino").val() != null && $("#input_rango_fecha_termino").val() != ''){
                                cargarTabla();
                            }
                        },
                        error     : function(error){
                            actionJsonError(error,btn);
                        }
                    })
                });

                $(modal_clone).modal('show');
            });

            //  EVENTO PARA CANCELAR UNA CITA
            $("#table_results").on('click','.btn_cancelar',function(){
                show_modal_cancelar_cita($(this));
            });

            //  EVENTO PARA VISUALZAR LA INFORMACION DE LA CITA
            $("#table_results").on('click','.btn_preview',function(){
                // Obtener los datos almacenados en la fila
                let data = $(this).closest('tr').data('rowData');
                show_info_cita(data);
            });

            //  MOSTRAR INFO PARA REGISTRAR PAGO
            $("#table_results").on('click','.btn_registrar_pago',function(){
                // Obtener los datos almacenados en la fila
                let data = $(this).closest('tr').data('rowData');
                show_info_cita(data,registrar_pago);
            });

            //  EVENTO PARA EDITAR UNA CITA
            $("#table_results").on('click','.btn_edit',function(){
                let row = $(this).closest('tr').data('rowData');
                get_rango_semana(row['fecha_cita']);

                let modal_clone = '';

                $.ajax({
                    url     : url_index,
                    method  : 'post',
                    data    : {
                        accion          : 'get_info_locacion',
                        id_locacion     : row['id_locacion'],
                        rango_fechas    : rango_semana_actual
                    },
                    success : function(data){
                        console.log('data ajax',data);
                        ajax_previo_show_modal(row,data);
                    },
                    error   : function(error){
                        console.log('error');
                        console.log(error);

                        showAlert('danger',error.responseText);

                        $(".div_principal_filter").find('.grid-hours').remove();
                        $(".div_principal_filter").find('.hour').remove();
                        $(".div_principal_filter").find('.floating-box').remove();

                        $(".div_principal_filter").find('#select_servicios_modal').val(null).trigger('change');
                        $(".div_principal_filter").find('#select_servicios_modal').prop('disabled',true).find('option').remove();

                        $(".div_principal_filter").find('#select_profesionales_modal').val(null).trigger('change');
                        $(".div_principal_filter").find('#select_profesionales_modal').prop('disabled',true).find('option').remove();
                    }
                });
            });

            $('[name="filtro_citas_pago"]').on('click',function(){
                let tmp_checked = $(this).prop('checked');
                $('[name="filtro_citas_pago"]').prop('checked',false);
                $(this).prop('checked',tmp_checked);
            })

            //  BUSQUEDA RAPIDA
            if (busqueda_pruebas){
                let fecha_hoy = new Date().toISOString().split('T')[0];

                let fecha_30_dias = new Date();
                fecha_30_dias.setDate(fecha_30_dias.getDate() + 30);
                fecha_30_dias = fecha_30_dias.toISOString().split('T')[0];
                $("#input_rango_fecha_inicio").val(fecha_hoy);
                $("#input_rango_fecha_termino").val(fecha_30_dias);
                $("#btnBuscar").trigger('click');
            }
            
            
        });

        function show_hours(header_agenda, div_days, min_hora_inicio, max_hora_inicio, profesionales, horario_no_disponible_prof = null, intervalo_citas){
            // Validación de formato HH:mm
            if (!moment(min_hora_inicio, "HH:mm", true).isValid() || !moment(max_hora_inicio, "HH:mm", true).isValid()) {
                console.warn("Las horas de inicio y fin no tienen el formato válido HH:mm");
                return;
            }

            let agendaContainer = $(header_agenda).find("#agenda-container");
            $(agendaContainer).find('.row_info').remove();
            $(agendaContainer).find('#agenda-header').find('.agenda-service').remove();

            // Generar horas con intervalo en minutos
            horas = [];
            let horaActual = moment(min_hora_inicio, "HH:mm");
            let horaFinal  = moment(max_hora_inicio, "HH:mm");

            while (true) {
                let horaSiguiente = moment(horaActual).add(intervalo_citas, 'minutes');
                if (horaSiguiente.isAfter(horaFinal)) break;

                horas.push(horaActual.format("HH:mm"));
                horaActual = horaSiguiente;
            }

            // Construcción del encabezado por profesional
            let row_fila        = '';
            let agendaHeader    = $(div_days).find("#agenda-header");
            profesionales.forEach(profesional => {
                row_fila += '<div class="agenda-service agenda-hours" data-idprofesional="'+profesional.id+'"></div>';
                let servicios = 'Servicios:\n';
                for(let i in profesional.servicios){
                    servicios += '*'+profesional.servicios[i]['nombre']+'\n';
                }

                const columna = $('<div>')
                    .addClass("agenda-service")
                    .text(profesional.nombre_completo)
                    .prop('title', servicios);
                agendaHeader.append(columna);
            });

            horas.forEach(hora => {
                const fila = $("<div>").addClass("agenda-row").addClass('row_info');
                let horaInicio = moment(hora, "HH:mm");
                let horaFin = moment(hora, "HH:mm").add(intervalo_citas, 'minutes');
                let rangoTexto = `${horaInicio.format("HH:mm")}-${horaFin.format("HH:mm")}`;

                const columnaHora = $("<div>").addClass("agenda-time").text(rangoTexto);
                fila.append(columnaHora);
                fila.append(row_fila);
                agendaContainer.append(fila);
            });

            // Citas no disponibles y desglosadas
            console.log('horario_no_disponible_prof',horario_no_disponible_prof);
            if (horario_no_disponible_prof){
                let id_profesional = profesionales[0]['id'];
                console.log('horario_no_disponible_prof',horario_no_disponible_prof);
                console.log('horario_no_disponible',horario_no_disponible);
                console.log('citas_desglosadas',citas_desglosadas);
                horario_no_disponible_prof.forEach(rango => {
                    cuadroFlotantesDiario($(div_days), rango, background_tipo_cita(rango), 'no_disponible', null, true);
                });
                horario_no_disponible.forEach(rango => {
                    cuadroFlotantesDiario($(div_days), rango, background_tipo_cita(rango), 'no_disponible', null, true);
                });
                citas_desglosadas.forEach(rango => {
                    if (rango.id_profesional == id_profesional) {
                        cuadroFlotantesDiario($(div_days), rango, background_tipo_cita(rango), 'flot_cita', null);
                    }
                });
            }
        }


        function calculaFechaPorDia(fecha, dias_a_sumar) {
            const fechaObj = new Date(fecha);
            fechaObj.setDate(fechaObj.getDate() + dias_a_sumar);

            const año = fechaObj.getFullYear();
            const mes = String(fechaObj.getMonth() + 1).padStart(2, '0'); // los meses van de 0 a 11
            const dia = String(fechaObj.getDate()).padStart(2, '0');

            return `${año}-${mes}-${dia}`;
        }

        // Función para generar los eventos flotantes PARA CALENDARIO POR DIA
        function cuadroFlotantesDiario(element_header,evento,background,tipo_cuadro,mensaje = null,limit_width = false) {
            let fecha_actual    = formatearFecha(fechaActual);
            fecha_actual        = fecha_actual.split(",");

            const dayIndex          = diasSemana.indexOf(fecha_actual[0]) + 1;
            const eventoDayIndex    = isNaN(evento.day) ? diasSemana.indexOf(evento.day) + 1 : evento.day;
            const profesional       = evento.nombre_profesional;
            const id_profesional    = evento.id_profesional;
            const id_paciente       = evento.id_paciente;

            if (eventoDayIndex != dayIndex){
                console.log('tipo_cuadro',tipo_cuadro);
                console.log('evento no aceptado',evento);
                console.log('return dias');
                return false;
            }

            console.log('pase evento',evento);

            if ($(element_header).attr('id') == 'div_header_agenda' && tipo_cuadro != 'no_disponible'){

                let id_servicio_filtro      = $(".filters").find('#select_servicios').val()  == null || $(".filters").find('#select_servicios').val() == '' ? null : $(".filters").find('#select_servicios').val();
                let id_profesional_filtro   = $(".filters").find('#select_profesionales').val() == null || $(".filters").find('#select_profesionales').val() == '' ? null : $(".filters").find('#select_profesionales').val();
                let id_paciente_filtro      = $(".filters").find('#select_pacientes').val() == null || $(".filters").find('#select_pacientes').val() == '' ? null : $(".filters").find('#select_pacientes').val();

                if (id_profesional_filtro != null && id_profesional_filtro != id_profesional){
                    return false;
                }

                if (id_paciente_filtro != null && id_paciente_filtro != id_paciente){
                    return false;
                }

                let servicios   = evento.servicios;

                console.log('servicios',servicios,id_servicio_filtro);

                let has_servicio    = false;
                if (id_servicio_filtro != null){
                    for(let i in servicios){
                        if (servicios[i]['id_servicio'] == id_servicio_filtro){
                            has_servicio    = true;
                            //return false;
                        }
                    }
                } else {
                    has_servicio    = true;
                }
                console.log('has_servicio',has_servicio);
                if (!has_servicio){
                    return false;
                }

            }

            // Convertir las horas de inicio y fin a minutos
            const inicioMinutos = convertirHoraAMinutos(evento.start);
            let end = evento.end.split(":");
            let finMinutos  = '';
            if (end[1] == '59'){
                finMinutos  = convertirHoraAMinutos(sumarUnMinuto(evento.end));
            } else {
                finMinutos = convertirHoraAMinutos(evento.end);
            }
            
            //  MENSAJE A MOSTRAR
            if (tipo_cuadro == 'no_disponible'){
                if (mensaje != null){
                    mensaje = '<span>'+mensaje+'</span>';
                } else {
                    mensaje = '<span>Horario no disponible</span>';
                }
            } else {
                mensaje = '<span>'+evento.nombre_completo+'</span><span>'+evento.start + '-' + evento.end+'</span>'
            }

            // Encontrar la fila correspondiente a la hora de inicio
            const horaEvento = moment(evento.start, "HH:mm");

            const filaInicio = $(element_header).find(".agenda-time").filter(function() {
                const rangoTexto = $(this).text().trim(); // Ej: "14:20-15:05"
                const [inicioStr, finStr] = rangoTexto.split("-"); // Dividir por "-"
                const horaInicio = moment(inicioStr, "HH:mm");
                const horaFin = moment(finStr, "HH:mm");

                return horaEvento.isSameOrAfter(horaInicio) && horaEvento.isBefore(horaFin);
            }).closest(".agenda-row");


            console.log('filaInicio',$(filaInicio).html());
            if (filaInicio.length) {
                let alturaPorHora   = 0; // Cada hora ocupa 100% de altura
                let alturaPorMinuto = 0; // Altura por minuto
                let top             = 0; // Posición vertical
                let altura          = 0; // Altura del evento
                let columnaProfesional  = '';
                console.log('profesional pase filaInicio',profesional);
                if (profesional == null){
                    columnaProfesional = filaInicio.find(".agenda-service").eq(0);

                    // Calcular la posición y altura del evento
                    alturaPorHora = 100; // Cada hora ocupa 100% de altura
                    alturaPorMinuto = alturaPorHora / 60; // Altura por minuto

                    top = (inicioMinutos % 60) * alturaPorMinuto; // Posición vertical
                    altura = ((finMinutos - inicioMinutos) * alturaPorMinuto) + ((((finMinutos - inicioMinutos) * (alturaPorMinuto)) / 100) *2 ); // Altura del evento
                    altura  = altura + (Math.floor(altura / 100) * 2);
                    if (!limit_width){
                        width = ($("#agenda-header").find(".agenda-service").length * 100) + 1;
                    } else {
                        width   = 100;
                    }

                    // // Crear el evento flotante
                    const eventoDiv = $("<div>")
                        .addClass("evento-flotante")
                        .addClass(background)
                        .addClass(tipo_cuadro)
                        .data('horainicio',evento.start)
                        .data('horatermino',evento.end)
                        .html(mensaje)
                        .css({
                            top: `${top}%`, // Posición vertical
                            height: `${altura}%`, // Altura del evento
                            width : `${width}%`
                        });
                    columnaProfesional.append(eventoDiv);
                } else {
                    // Encontrar la columna correspondiente al profesional
                    const profesionalIndex = profesionales.findIndex(p => p.id === evento.id_profesional);
                    console.log('profesionalIndex',profesionalIndex);
                    if (profesionalIndex !== -1) {
                        console.log('pase profesionalIndex',profesionalIndex);
                        columnaProfesional = filaInicio.find(".agenda-service").eq(0);

                        // Calcular la posición y altura del evento
                        alturaPorHora = 100; // Cada hora ocupa 100% de altura
                        alturaPorMinuto = alturaPorHora / 60; // Altura por minuto

                        top = (inicioMinutos % 60) * alturaPorMinuto; // Posición vertical
                        altura  = (finMinutos - inicioMinutos) * alturaPorMinuto; // Altura del evento
                        altura  = altura + (Math.floor(altura / 100) * 2);

                        // Crear el evento flotante
                        const eventoDiv = $("<div>")
                            .addClass("evento-flotante")
                            .addClass(background)
                            .addClass(tipo_cuadro)
                            .data('idagendacita',evento.id_agenda_cita)
                            .data('idprofesional',id_profesional)
                            .data('profesional',profesional)
                            .data('paciente',evento.nombre_completo)
                            .data('dialabel',diasSemana[dayIndex - 1])
                            .data('duracion',evento.duracion)
                            .data('horainicio',evento.start)
                            .data('horatermino',evento.end)
                            .data('asistencia',evento.asistencia)
                            .html(mensaje)
                            .css({
                                top: `${top}%`, // Posición vertical
                                height: `${altura}%`, // Altura del evento
                            });
                        console.log('columnaProfesional',$(columnaProfesional).html());
                        columnaProfesional.append(eventoDiv);
                    }
                }
            }
        }

        //  RETORNA LA CLASE DEL COLOR BACKGROUND DEL DIV FLOTANTE
        function background_tipo_cita(info_cita){
            //  VALOR POR DEFECTO
            let return_background   = 'bg-secondary';

            //  CITA PROGRAMADA
            if (typeof info_cita['id_cita_programada'] != "undefined" && info_cita['id_cita_programada'] != null && info_cita['id_cita_programada'] != ''){
                return 'bg-success';
            }

            //  CITAS AGRUPADAS
            if (typeof info_cita['lista_id_agenda_citas'] != "undefined" && info_cita['lista_id_agenda_citas'] != null && info_cita['lista_id_agenda_citas'] != ''){
                return 'bg-primary';
            }

            //  CITA REAGENDADA
            if (typeof info_cita['id_cita_reagendada'] != "undefined" && info_cita['id_cita_reagendada'] != null && info_cita['id_cita_reagendada'] != ''){
                return 'bg-info';
            }

            // CITA ORDINARIA
            if (typeof info_cita['id_agenda_cita'] != "undefined" && info_cita['id_agenda_cita'] != null && info_cita['id_agenda_cita'] != ''){
                return 'bg-info';
            }

            return return_background;
        }

        // Función para convertir una hora en minutos desde las 00:00
        function convertirHoraAMinutos(hora) {
            const [h, m] = hora.split(":").map(Number);
            return h * 60 + m;
        }

        function sumarUnMinuto(hora, minutosASumar = 1) {
            // Dividir la hora en horas y minutos
            let [horas, minutos] = hora.split(":").map(Number);

            // Sumar los minutos
            minutos += Number(minutosASumar);

            // Calcular cuántas horas extra hay y ajustar
            horas += Math.floor(minutos / 60);
            minutos = minutos % 60;

            // Ajustar formato de dos dígitos
            horas = horas % 24; // Opcional, si quieres mantenerlo en formato 24 hrs
            let horasFormateadas = horas.toString().padStart(2, "0");
            let minutosFormateados = minutos.toString().padStart(2, "0");

            return `${horasFormateadas}:${minutosFormateados}`;
        }

        //  CALCULA LA HORA INICIO EN BASE A LA SOLICITADA Y QUE NO ESTE EMPALMADA
        function verificarHoraInicio(modal_clone,start,end,id_agenda_cita = null,duracion,estricto){
            let hora_inicio_header  = convertirHoraATiempo(start);
            let hora_termino_header = convertirHoraATiempo(end);
            let flag_empalmados             = false;
            let hora_termino_empalmado      = '';
            let margen_minutos_empalmado    = estricto ? 0 : margen_minutos_empalmado_global;

            $(modal_clone).find('.evento-flotante').each(function () {
                let element = $(this);

                if ($(element).data('idagendacita') != "undefined" && $(element).data('idagendacita') === id_agenda_cita) {
                    return true;
                }

                let hora_inicio_str = $(element).data('horainicio');
                let hora_termino_str = $(element).data('horatermino');

                let hora_inicio = convertirHoraATiempo(hora_inicio_str);
                let hora_termino = convertirHoraATiempo(hora_termino_str);

                // Ajustar con margen usando sumarUnMinuto
                let hora_inicio_mas_margen = convertirHoraATiempo(sumarUnMinuto(hora_inicio_str, margen_minutos_empalmado));
                let hora_termino_menos_margen = convertirHoraATiempo(sumarUnMinuto(hora_termino_str, -margen_minutos_empalmado));

                // Si la cita existente termina antes de que inicie la nueva
                if (hora_termino < hora_inicio_header) {
                    return true;
                }

                // Verificar empalme con hora de inicio
                if (hora_inicio_header >= hora_inicio_mas_margen && hora_inicio_header < hora_termino_menos_margen) {
                    console.log('empalmado hora_inicio_header');
                    flag_empalmados = true;
                    hora_inicio_header = hora_termino;
                    hora_termino_header = convertirHoraATiempo(sumarUnMinuto(hora_termino_str, duracion));
                    hora_termino_empalmado = hora_termino_str;
                    return true;
                }

                // Verificar empalme con hora de término
                if (hora_termino_header > hora_inicio_mas_margen && hora_termino_header <= hora_termino_menos_margen) {
                    console.log('empalmado hora termino');
                    flag_empalmados = true;
                    hora_inicio_header = hora_termino;
                    hora_termino_header = convertirHoraATiempo(sumarUnMinuto(hora_termino_str, duracion));
                    hora_termino_empalmado = hora_termino_str;
                    return true;
                }

                // Verificar empalme máximo
                if (hora_inicio_header <= hora_inicio_mas_margen && hora_termino_header >= hora_termino_menos_margen) {
                    console.log('empalmado maximo');
                    flag_empalmados = true;
                    hora_inicio_header = hora_termino;
                    hora_termino_header = convertirHoraATiempo(sumarUnMinuto(hora_termino_str, duracion));
                    hora_termino_empalmado = hora_termino_str;
                    return true;
                }

                return false;
            });

            if (!flag_empalmados){
                hora_termino_empalmado  = start;
            }

            //  SE VERIFICA SI EL HORARIO FINAL EXCEDE EL HORARIO DE ATENCION
            let info_ultimo_row = $(modal_clone).find(".agenda-time:last").text();

            //  EXCEDE EL HORARIO DE ATENCION
            let excede_horario  = false;
            if (convertirHoraATiempo(sumarUnMinuto(hora_termino_empalmado,duracion)) >= convertirHoraATiempo(info_ultimo_row)){
                excede_horario  = true;
            }

            console.log('flag_empalmados fin',flag_empalmados);
            console.log('hora_termino_empalmado fin',hora_termino_empalmado);
            return {
                flag_empalmados : flag_empalmados,
                hora_termino_empalmado  : hora_termino_empalmado,
                excede_horario          : excede_horario
            };
        }

        function show_horario_no_disponible_profesional(div_header = null){
            //  SE PINTA EL HORARIO NO DISPONIBLE POR PROFESIONAL POR DIA
            let header_id_profesional   = null;
            console.log("$(div_header).hasClass('modal')",$(div_header).hasClass('modal'),div_header != null && $(div_header).hasClass('modal'));
            if (div_header != null && $(div_header).hasClass('modal')){
                //header_id_profesional   = $(div_header).find('#span_paciente').data('idprofesional');
                header_id_profesional   = $(div_header).find('#select_profesionales_modal').val();
                console.log('aqui ver',header_id_profesional);
            }
            console.log('profesionales dsentro de funcin',profesionales);
            for(let i in profesionales){
                let rango_no_disponible = profesionales[i]['rango_no_disponible'];
                let nombre_completo = profesionales[i]['nombre_completo'];
                let id_profesional  = profesionales[i]['id'];
                console.log('id_profesional if',id_profesional)

                if (header_id_profesional != null && id_profesional != header_id_profesional){
                    //return true;
                }
                console.log('pase if',profesionales[i]);

                if (header_id_profesional == null || id_profesional == header_id_profesional){
                    rango_no_disponible.forEach(rango => {
                        // Agregamos la propiedad nombre_completo al objeto rango
                        rango.nombre_profesional    = nombre_completo;
                        rango.id_profesional        = id_profesional;
                        // Llamamos a la función con el rango modificado
                        if (div_header == null){
                            cuadroFlotantesDiario($("#div_header_agenda"),rango, background_tipo_cita(rango), 'no_disponible','Profesional no disponible');
                        } else {
                            cuadroFlotantesDiario($(div_header),rango, background_tipo_cita(rango), 'no_disponible','Profesional no disponible');
                        }
                    });
                }
                
            }
        }

        // Función para cambiar el día (anterior o siguiente)
        function cambiarDia(dias, nueva_fecha, div_header) {
            let last_month = fechaActual.getMonth();
            let new_month = last_month;

            let nuevaFecha = nueva_fecha ? new Date(nueva_fecha) : new Date(fechaActual);
            
            if (dias !== null) {
                nuevaFecha.setDate(nuevaFecha.getDate() + dias);
            }

            // Si la nueva fecha es mayor a la fecha límite, no se permite el cambio
            let valida_fechas   = validar_fechas_apertura_agenda(nuevaFecha);
            if (valida_fechas != true){
                showAlert('danger',valida_fechas);
                return false;
            }

            fechaActual = nuevaFecha;
            new_month = fechaActual.getMonth();
            //div_header  = $(div_header).attr('id') == 'div_header_agenda' ? '.div_principal_filter' : '.div_cambiar_dia';
            console.log('antes funcion',div_header);
            actualizarFecha($(div_header));
            
            // if (new_month !== last_month) {
            //     renderCalendarMes();
            // }

            //  AL CAMBIAR EL DIA ACTUAL, SE BUSCA LAS CITAS TANTO DE
            //  ESE DIA COMO DEL RANGO DE SEMANA
        }

        //  VALIDA 
        function validar_fechas_apertura_agenda(nueva_fecha){
            try{
                //  VALIDA SI EXISTE AL MENOS UN REGISTRO DE APERTURA DE AGENDA
                if (exist_apertura_agenda == 0){
                    throw new Error("No existe un registro de apertura de agenda");
                } 

                if (nueva_fecha > cierre_agenda) {
                    throw new Error("No puedes seleccionar una fecha posterior al cierre de la agenda.");
                }

            }catch(err){
                return err;
            }

            return true;
        }

        // Función para actualizar la fecha mostrada
        function actualizarFecha(div_header) {
            console.log('div_header',div_header);
            let div_fecha   = $(div_header).attr("id") == 'div_header_agenda' ? $(".div_principal_filter") : $(div_header);
            $(div_fecha).find("#fecha-actual").text(formatearFecha(fechaActual));

            if (rango_semana_actual.fecha_inicio != ''){
                //  SE VERIFICA QUE LA NUEVA FECHA 
                let fechaInicio = new Date(rango_semana_actual.fecha_inicio + 'T00:00:00');
                let fechaTermino = new Date(rango_semana_actual.fecha_termino + 'T23:59:59');

                // Ahora verificamos si fechaActual está dentro del rango
                if (Object.keys(horario_no_disponible).length > 0){
                    if (fechaActual >= fechaInicio && fechaActual <= fechaTermino) {
                        div_header  = $(div_header).hasClass('modal') ? $(div_header) : '#div_header_agenda';
                        $(div_header).find(".div_header_days_container").find('.evento-flotante').remove();
                        let id_profesional  = null;
                        if (div_header == '#div_header_agenda'){
                            console.log('entre if');
                            horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(div_header),rango,background_tipo_cita,'no_disponible'));
                        } else {
                            id_profesional  = $(div_header).find('#span_paciente').data('idprofesional');
                            console.log('entro else');
                            console.log('horario_no_disponible',horario_no_disponible);
                            horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(div_header),rango,background_tipo_cita(rango),'no_disponible',null,true));
                        }
                        
                        citas_desglosadas.forEach(rango => {
                            if (id_profesional == null || rango.id_profesional == id_profesional) {
                                cuadroFlotantesDiario($(div_header), rango, background_tipo_cita(rango), 'flot_cita', null);
                            }
                        });
                        show_horario_no_disponible_profesional($(div_header));
                    } else {
                        div_header  = $(div_header).hasClass('modal') ? $(div_header) : null;
                        get_all_appointments(div_header);
                    }
                }
                
            }
            
        }

        function print_modal_info_cita(modal_clone,template_days_container,intervalo_citas,min_hora_inicio,max_hora_inicio,id_profesional,rango_no_disponible,id_agenda_cita,recrear_servicios,info_cita){
            //  SE BORRAN TODOS LOS REGISTROS DE LA AGENDA
            $(template_days_container).find('.agenda-service').remove();
            $(template_days_container).find('.evento-flotante').remove();
            $(template_days_container).find('.row_info').remove();
            //  SECCION PARA PINTAR LA INFORMACION DE LA CITA
            let profesional = profesionales.find(row => row.id == id_profesional);
            console.log('min_hora_inicio',min_hora_inicio);
            console.log('max_hora_inicio',max_hora_inicio);
            console.log('recrear_servicios',recrear_servicios);
            show_hours(template_days_container,template_days_container,min_hora_inicio,max_hora_inicio,[profesional],rango_no_disponible,intervalo_citas);

            if (id_agenda_cita == null){
                let hora_inicio = verificarHoraInicio(modal_clone,hora_default,sumarUnMinuto(hora_default,5),id_agenda_cita,5,false);
                
                $(modal_clone).find('.input_hora_inicio').val(hora_inicio['hora_termino_empalmado']);
            } else {
                console.log('citas_desglosadas',citas_desglosadas,id_agenda_cita);
                //let info_cita   = citas_desglosadas.find(row => row.id_agenda_cita == id_agenda_cita);
                
                $(modal_clone).find('.input_hora_inicio').val(info_cita.start).data('hora',info_cita.start);
                $(modal_clone).find('.input_hora_termino').val(info_cita.end);

                //  SE CREAN LOS SERVICIOS
                if (recrear_servicios){
                    console.log('info_cita recrear_servicios',info_cita,recrear_servicios);
                    for(let i in info_cita['servicios']){
                        let servicio = info_cita['servicios'][i];

                        $(modal_clone).find('.btn_add_service').trigger('click');
                        $(modal_clone).find('.header_servicio').each(function(){
                            if ($(this).find('.select_servicios_modal').val() != '' && $(this).find('.select_servicios_modal').val() != null){
                                return true;
                            }

                            $(this).find('.select_servicios_modal').val(servicio['id_servicio']).trigger('change');
                            $(this).find('.duracion').val(servicio['duracion']);
                            $(this).find('.costo').text(servicio['costo']);
                            return false;
                        });

                    }
                }
                

                $(modal_clone).find('.div_select_paciente').hide();
                $(modal_clone).find('.div_datos_paciente').show();
                $(modal_clone).find('#span_paciente').text(info_cita['celular'] + ' - ' + info_cita['primer_apellido'] + ' ' + info_cita['segundo_apellido']+ ' '+ info_cita['nombre'] );
                $(modal_clone).find('#span_paciente').data('idagendacita',id_agenda_cita);
                $(modal_clone).find('#span_paciente').data('idprofesional',id_profesional);

                //  EVITA QUE RECALCULE LA FECHA CUANDO VIENE DESDE EL COMBO DE PROFESIONALES
                if (recrear_servicios){
                    console.log('info_cita',info_cita);
                    let formato_fecha   = info_cita['fecha_cita'].split('-');

                    $(modal_clone).find('#span_fecha_cita').text(formato_fecha[2]+'/'+formato_fecha[1]+'/'+formato_fecha[0]);
                    $(modal_clone).find('#fecha-actual').text(formatearFecha(new Date(formato_fecha[0],formato_fecha[1] - 1,formato_fecha[2])));
                    fechaActual = new Date(formato_fecha[0],formato_fecha[1] - 1,formato_fecha[2]);
                }

                $(modal_clone).find('.div_input_paciente').hide();
                $(modal_clone).find('.div_text_paciente').show();
                $(modal_clone).find('#input_celular').val(info_cita['celular']).prop('disabled',true);
                $(modal_clone).find('#input_primer_apellido').val(info_cita['primer_apellido']).prop('disabled',true);
                $(modal_clone).find('#input_segundo_apellido').val(info_cita['segundo_apellido']).prop('disabled',true);
                $(modal_clone).find('#input_nombre').val(info_cita['nombre']).prop('disabled',true);

                calcula_totales(modal_clone,id_profesional,id_agenda_cita);

                $(modal_clone).on('hidden.bs.modal', function (e) {
                    // Tu código aquí
                    fechaActual = tmp_fecha_actual;

                    //  CITAS POR DIA
                    citas_desglosadas       = tmp_citas_desglosadas.map(obj => ({ ...obj }));
                });

            }
        }

        function cambiarSemana(semanas,div_header = null) {
            let nuevaFecha = new Date(fechaActual);
            nuevaFecha.setDate(nuevaFecha.getDate() + (7 * semanas));

            let valida_fechas   = validar_fechas_apertura_agenda(nuevaFecha);
            if (valida_fechas != true){
                showAlert('danger',valida_fechas);
                return false;
            }

            fechaActual = nuevaFecha;
            actualizarFecha($(div_header));
            // if (!$(div_header).hasClass('modal')){
            //     renderCalendarMes();
            // }
        }

        //  FUNCION PARA OBTENER LAS CITAS DEL RANGO DE FECHAS
        function get_all_appointments(modal_clone = null){
            console.log('modal_clone',modal_clone);
            if (modal_clone != null){
                $(modal_clone).find('.evento-flotante').remove();
            }
            
            get_rango_semana(fechaActual);
            const id_locacion       = $("#select_locaciones").val();
            const id_profesional    = $(modal_clone).find("#select_profesionales_modal").val();
            $.ajax({
                url     : url_index,
                method  : 'post',
                data    : {
                    accion          : 'get_info_locacion',
                    id_locacion     : id_locacion,
                    rango_fechas    : rango_semana_actual,
                    id_profesional  : id_profesional
                },
                success : function(data){
                    console.log('data info 1');
                    console.log(data);
                    //  CODIGO CUANDO EL EVENTO VIENE DESDE UN MODAL
                    $(modal_clone).find('.evento-flotante').remove();
                    citas_desglosadas   = data['citas_agendadas'];
                    horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'no_disponible',null,true));
                    citas_desglosadas.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'flot_cita',null));
                    show_horario_no_disponible_profesional($(modal_clone));
                    setTimeout(calcula_totales($(modal_clone),$(modal_clone).find('#span_paciente').data('idprofesional'),$(modal_clone).find('#span_paciente').data('idagendacita')),500);
                    
                    
                },
                error   : function(error){
                    console.log('error');
                    console.log(error);

                    showAlert('danger',error.responseText);

                    $(".div_principal_filter").find('.grid-hours').remove();
                    $(".div_principal_filter").find('.hour').remove();
                    $(".div_principal_filter").find('.floating-box').remove();

                    $(".div_principal_filter").find('#select_servicios_modal').val(null).trigger('change');
                    $(".div_principal_filter").find('#select_servicios_modal').prop('disabled',true).find('option').remove();

                    $(".div_principal_filter").find('#select_profesionales_modal').val(null).trigger('change');
                    $(".div_principal_filter").find('#select_profesionales_modal').prop('disabled',true).find('option').remove();
                }
            });
        }
        
    })();
</script>