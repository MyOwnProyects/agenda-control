<?php 
use App\Library\FuncionesGlobales;
?>
<style>
    /* Estilos encapsulados dentro de .div_header_days_container */
    .div_header_days_container {
        font-family: Arial, sans-serif;
    }
    .div_header_days_container .agenda-container {
        display: flex;
        flex-direction: column;
        border: 1px solid #ddd;
        margin: 20px;
        position: relative; /* Necesario para posicionar el div flotante */
    }
    .div_header_days_container .agenda-row {
        display: flex;
        border-bottom: 1px solid #ddd;
        position: relative; /* Necesario para posicionar el div flotante */
    }
    .div_header_days_container .agenda-time {
        flex: 0 0 100px;
        padding: 10px;
        background-color: #f8f9fa;
        border-right: 1px solid #ddd;
        text-align: center;
    }
    .div_header_days_container .agenda-service {
        flex: 1;
        padding: 10px;
        border-right: 1px solid #ddd;
        position: relative; /* Necesario para posicionar el div flotante */
        /*transition: border-color 0.3s ease;  Transición suave para el hover */
    }
    .div_header_days_container .agenda-service:last-child {
        border-right: none;
    }
    .div_header_days_container .agenda-hours:hover:not(.no-hover-effect) {
        border: 1px solid #007bff; 
    }
    .div_header_days_container .agenda-header {
        font-weight: bold;
        background-color: #e9ecef;
    }
    .div_header_days_container .evento-flotante {
        position: absolute;
        background-color: rgba(0, 123, 255, 0.2);
        border: 1px solid #007bff; 
        width: 100%; /* CAMBIO: usar todo el ancho */
        left: 0; /* CAMBIO: alinear a la izquierda */
        z-index: 10;
        box-sizing: border-box;
        pointer-events: auto;
        cursor: pointer;
    }

    .div_header_days_container .evento-flotante span {
        color: #fff;
        text-align: center;
        font-size: 14px;
        line-height: 1.2;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        margin-right: 8px; /* Espacio entre spans */
    }

    /* Reducción dinámica del tamaño del texto si es necesario */
    .div_header_days_container .evento-flotante span {
        font-size: clamp(10px, 2vw, 14px); /* Adaptar el tamaño del texto dinámicamente */
    }
    .div_header_filters .navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 20px;
    }
    .div_header_filters .navigation .left-section {
        display: flex;
        align-items: center;
        gap: 10px; /* Espacio entre los botones */
        width: 400px; /* Ancho fijo para left-section */
    }
    .div_header_filters .navigation .right-section {
        display: flex;
        align-items: center;
        gap: 10px; /* Espacio entre los botones */
    }
    .div_header_filters .navigation button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }
    .div_header_filters .filters {
        display: flex;
        gap: 20px; /* Espacio entre los select */
        margin: 20px;
    }
    .div_header_filters .filters select {
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    
    /*  ESTILO PARA DIV DE SEMANAS  */
    .div_header_week_container .week-container {
        display: grid;
        grid-template-columns: repeat(8, 120px);
        grid-auto-rows: 70px;
        gap: 1px;
        background-color: #f0f0f0;
        padding: 1px;
        position: relative;
        width: fit-content; /* Ajusta el ancho al contenido */
        margin: 0 auto; /* Centra el contenedor */
    }

    .div_header_week_container .grid-item {
        background-color: white;
        border: 1px solid #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 5px;
        box-sizing: border-box;
    }
    .div_header_week_container .grid-item.header {
        background-color: #f8f9fa;
        font-weight: bold;
    }
    .div_header_week_container .grid-item.hour {
        background-color: #f8f9fa;
        font-weight: bold;
    }
    .div_header_week_container .floating-box {
        position: absolute;
        background-color: rgba(0, 123, 255, 0.3);
        border: 2px solid #007bff;
        box-sizing: border-box;
        pointer-events: auto;
        cursor: pointer;
    }

    /* Clase para bg-danger */
    .div_header_week_container .floating-box.bg-danger {
        background-color: rgba(220, 53, 69, 0.3); /* Color peligro (semi-transparente) */
        border-color: #dc3545; /* Color danger para el borde */
    }

    /* Clase para bg-success */
    .div_header_week_container .floating-box.bg-success {
        background-color: rgba(40, 167, 69, 0.3); /* Color éxito (semi-transparente) */
        border-color: #28a745; /* Color success para el borde */
    }

    /* Clase para bg-info */
    .div_header_week_container .floating-box.bg-info {
        background-color: rgba(23, 162, 184, 0.3); /* Color informativo (semi-transparente) */
        border-color: #17a2b8; /* Color info para el borde */
    }

    /* Clase para bg-secondary */
    .div_header_week_container .floating-box.bg-secondary {
        background-color: rgba(108, 117, 125, 0.3); /* Color gris (semi-transparente) */
        border-color: #6c757d; /* Color secondary para el borde */
    }

    /* Clase para bg-dark */
    .div_header_week_container .floating-box.bg-dark {
        background-color: rgba(52, 58, 64, 0.3); /* Color gris oscuro (semi-transparente) */
        border-color: #343a40; /* Color dark para el borde */
    }

    .div_header_week_container .grid-hours:hover {
        border: 1px solid #007bff; /* Borde azul de Bootstrap al hacer hover */
    }

    .hide {
        display:none;
    }

    .div_header_citas {
        min-height: 50px;
        overflow: scroll;
        max-height: 150px;
    }

    .div_header_week_container .floating-box span {
        display: block; /* Forzar a los spans a ocupar líneas independientes */
        width: 100%; /* Ajustar al ancho del contenedor */
        color: #fff; /* Texto en blanco */
        text-align: center; /* Centrar el texto */
        font-size: 14px; /* Tamaño inicial del texto */
        line-height: 1.2; /* Espaciado entre líneas */
        white-space: nowrap; /* Impedir que el texto se divida en varias líneas */
        overflow: hidden; /* Ocultar texto que exceda el contenedor */
        text-overflow: ellipsis; /* Mostrar "..." si el texto excede */
    }

    /* Reducción dinámica del tamaño del texto si es necesario */
    .div_header_week_container .floating-box span {
        font-size: clamp(10px, 2vw, 14px); /* Adaptar el tamaño del texto dinámicamente */
    }

    .info-box {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgba(255, 255, 255, 1);
      color: #000;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      z-index: 1000;
      display: none;
      max-width: 500px;
      width: 90%;
      text-align: center;
    }

    #infoBox {
      font-family: Arial, sans-serif;
    }

    #infoBox .event-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    #infoBox .event-title {
      font-size: 1.1rem;
      font-weight: 600;
    }

    #infoBox .icon-button {
      background: none;
      border: none;
      font-size: 1rem;
      color: #6c757d;
      cursor: pointer;
    }

    #infoBox .event-detail {
      font-size: 0.95rem;
      color: #555;
    }

    #infoBox .event-icon {
      margin-right: 8px;
    }

    #infoBox .dot {
      height: 12px;
      width: 12px;
      background-color: #2196f3;
      border-radius: 50%;
      display: inline-block;
      margin-right: 8px;
    }
    

    .hide_container{
        display: none!important;
    }

    /*  ESTILO CALENDARIO POR MES*/
    .div_header_month_container {
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 60%;
        max-width: 800px;
        text-align: center;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center; /* Asegura que el contenido esté centrado */
        margin: 0 auto; /* Centra horizontalmente */
    }


    .div_header_month_container .header button {
        background: none;
        border: none;
        color: white;
        font-size: 1.5em;
        cursor: pointer;
    }

    .div_header_month_container .days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0;
        padding: 10px;
        background-color: #f0f0f0;
        font-weight: bold;
    }

    .div_header_month_container .calendar_month_dates {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 0;
        padding: 10px;
    }

    .div_header_month_container .calendar_month_dates div {
        padding: 15px;
        text-align: center;
        cursor: pointer;
        font-size: 1.2em;
    }

    .div_header_month_container .calendar_month_dates div.other-month {
        color: #aaa;
    }

    .div_header_month_container .calendar_month_dates div:hover {
        border: 1px solid #007bff; /* Borde azul de Bootstrap al hacer hover */
    }

    .div_header_month_container .marked-day {
        background-color: #FFD700;
        color: black;
    }

    .div_header_month_container .current-day {
        border: 1px solid #007bff;
        background-color: #007bff;
        font-weight: bold;
        color: white;
    }

    .div_header_month_container .disabled {
        background-color: #ccc !important;
        color: #666 !important;
        cursor: not-allowed;
        pointer-events: none;
        border: 1px solid #ccc;
    }

    .div_header_month_container .days,
    .div_header_month_container .calendar_month_dates {
        width: 100%;
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        justify-content: center;
    }

    .div_header div {
        font-weight: 500;
    }
    .servicio {
        min-width: 100px;
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>
<div class="container div_principal_filter div_header_filters col-12">
    <h1 class="text-center my-4"><?php echo $translations['html_agenda']; ?></h1>

    <!-- Filtros de Servicios y Pacientes -->
    <div class="filters">

        <div class="col-3">
            <label for="input_primer_apellido" class="form-label"><?php echo $translations['html_locations']; ?></label>
            <?php $count_locaciones = count($arr_locaciones); ?>
            <select id="select_locaciones" class="select_locaciones" <?php echo $count_locaciones == 1 ? 'disabled' : ''; ?>>
                <option value=""></option>
                <?php foreach($arr_locaciones as $locacion): ?>
                    <option value="<?php echo $locacion['id']; ?>" <?php echo $count_locaciones == 1 ? 'selected' : ''; ?>><?php echo $locacion['nombre']; ?></option>
                <?php endforeach; ?>
            </select>
        </div>
        <div class="col-3">
            <label for="input_primer_apellido" class="form-label"><?php echo $translations['html_services']; ?></label>
            <select id="select_servicios" class="select_servicios select_filtros">
                <option value=""></option>
            </select>
        </div>
        <div class="col-3">
            <label for="input_primer_apellido" class="form-label"><?php echo $translations['html_title_professionals']; ?></label>
            <select id="select_profesionales" class="select_profesionales select_filtros">
                <option value=""></option>
            </select>
        </div>
        <div class="col-3">
            <label for="input_primer_apellido" class="form-label"><?php echo $translations['html_title_patients']; ?></label>
            <select id="select_pacientes" class="select_pacientes select_filtros">
                <option value=""></option>
            </select>
        </div>
    </div>
    <?php if ($apertura_agenda): ?>
    <div class="container col-12">
        <button id="btn_agenda_opening" type="button" class="btn btn-outline-dark"><?php echo $translations['html_agenda_opening']; ?></button>
    </div>
    <?php endif; ?>

        <!-- Sección de navegación -->
    <div class="navigation">
        <!-- Sección izquierda: Botones de Mes, Semana y Día -->
        <div class="left-section">
            <button id="btn-mes-anterior" class="btn btn-secondary"><<<</button>
            <button id="btn-semana-anterior" class="btn btn-secondary"><<</button>
            <button id="btn-anterior" class="btn btn-secondary"><</button>
            <h3 id="fecha-actual"></h3>
            <button id="btn-siguiente" class="btn btn-secondary">></button>
            <button id="btn-semana-siguiente" class="btn btn-secondary">>></button>
            <button id="btn-mes-siguiente" class="btn btn-secondary">>>></button>
            <button id="btn-hoy" class="btn btn-primary"><?php echo $translations['html_today']; ?></button>
        </div>

        <!-- Sección derecha: Botones de Mes/Semana/Día -->
        <div class="right-section">
            <button id="btn-mes" class="btn btn-primary"><?php echo $translations['html_month']; ?></button>
            <button id="btn-semana" class="btn btn-primary"><?php echo $translations['html_week']; ?></button>
            <button id="btn-dia" class="btn btn-primary"><?php echo $translations['html_day']; ?></button>
        </div>
    </div>
</div>
<div id="div_header_agenda">
    <div class="container div_header_days_container container-calendar hide_container col-12">
        <!-- Agenda -->
        <div class="agenda-container" id="agenda-container">
            <!-- Header -->
            <div class="agenda-row agenda-header" id="agenda-header">
                <div class="agenda-time">Hora</div>
                <!-- Las columnas de profesionales se generarán dinámicamente aquí -->
            </div>
            <!-- Las filas de horas se generarán dinámicamente aquí -->
        </div>
    </div>
    <div id ="div_header_week_container" class="container mt-4 d-flex flex-column align-items-center div_header_week_container hide_container container-calendar col-12">
        <div class="week-container div_principal">
            <div class="grid-item header"></div>
            <div class="grid-item header">Lunes</div>
            <div class="grid-item header">Martes</div>
            <div class="grid-item header">Miércoles</div>
            <div class="grid-item header">Jueves</div>
            <div class="grid-item header">Viernes</div>
            <div class="grid-item header">Sábado</div>
            <div class="grid-item header">Domingo</div>
        </div>
    </div>
    <div class=" div_header_month_container hide_container container-calendar col-12">
        <div class="days">
            <div class="day">Dom</div>
            <div class="day">Lun</div>
            <div class="day">Mar</div>
            <div class="day">Mié</div>
            <div class="day">Jue</div>
            <div class="day">Vie</div>
            <div class="day">Sáb</div>
        </div>
        <div class="calendar_month_dates" id="calendar_month_dates"></div>
    </div>
</div>

<div class="modal fade" id="modal_agenda_opening" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_agenda_opening"><?php echo FuncionesGlobales::UpperString($translations['html_agenda_opening']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_agenda_opening" class="needs-validation" novalidate>
            <div class="row mb-3">
                <!-- Campo Clave -->
                <div class="col-md-6">
                    <label for="input_clave" class="col-form-label"><?php echo $translations['html_location']; ?></label>
                    <?php $count_locaciones = count($arr_locaciones); ?>
                    <select id="select_locaciones_modal" class="select_locaciones_modal" <?php echo $count_locaciones == 1 ? 'disabled' : ''; ?> required>
                        <option value=""></option>
                        <?php foreach($arr_locaciones as $locacion): ?>
                            <option value="<?php echo $locacion['id']; ?>" <?php echo $count_locaciones == 1 ? 'selected' : ''; ?>><?php echo $locacion['nombre']; ?></option>
                        <?php endforeach; ?>
                    </select>
                    <div class="invalid-feedback"><?php echo $translations['html_error_selected_location']; ?></div>
                </div>
                <!-- Campo Nombre -->
                <div class="col-md-6">
                    <label for="input_fecha_inicio" class="col-form-label"><?php echo $translations['html_starting_date']; ?></label>
                    <input type="date" class="form-control" id="input_fecha_inicio" disabled required>
                    <div class="invalid-feedback"><?php echo $translations['html_error_starting_date']; ?></div>
                </div>
                <div class="col-md-6">
                    <label for="input_fecha_termino" class="col-form-label"><?php echo $translations['html_limit_date']; ?></label>
                    <input type="date" class="form-control" id="input_fecha_termino" disabled required>
                    <div class="invalid-feedback"><?php echo $translations['html_error_starting_date']; ?></div>
                </div>
            </div>
            <div id="alert_error" class="alert alert-danger align-items-center" role="alert" style="display:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div id="msg_error">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
        <button type="button" id="btnSave" class="btn btn-primary"><?php echo $translations['html_btn_save']; ?></button>
      </div>
    </div>
  </div>
</div>

<!-- Caja emergente -->
<div id="infoBox" class="info-box">
    <div class="event-header mb-2">
        <div class="d-flex align-items-center">
        <span class="dot"></span>
        <span id="servicio" class="event-title"></span>
        </div>
        <div>
        <button class="icon-button btn_edit" title="Agregar/Quitar Servicios - Reagendar"><i class="bi bi-pencil-fill"></i></button>
        <button class="icon-button btn_asistencia" title=""></button>
        <button class="icon-button btn_cancelar" title="Cancelar"><i class="bi bi-calendar-x"></i></button>
        <button id="closeModal" type="button" class="btn" ><i class="bi bi-x"></i></button>
        </div>
    </div>

    <div class="event-detail mb-2">
      <span id="dia"></span> • <span id="horario"></span>
    </div>

    <div class="event-detail mb-1 d-flex align-items-center">
        <i class="bi bi-clock"></i>&nbsp<span id="duracion"></span>
    </div>

    <div class="event-detail d-flex align-items-center">
        <i class="bi bi-person-fill"></i>&nbsp<span id="profesional"></span>
    </div>
</div>

<div class="modal fade" id="modal_cancelar_cita" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_cancelar_cita"><?php echo FuncionesGlobales::UpperString($translations['html_cancel_appointment']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_cancelar_cita" class="needs-validation" novalidate>
            <div class="row mb-3">
                <!-- Campo Clave -->
                <div class="col-md-12">
                    <label for="input_clave" class="col-form-label"><?php echo $translations['html_reason_cancellation']; ?></label>
                    <select id="select_motivo_cancelacion">
                        <option></option>
                        <?php foreach($motivos_cancelacion_cita as $motivo): ?>
                            <option value="<?php echo $motivo['id']; ?>"><?php echo $motivo['nombre']; ?></option>
                        <?php  endforeach; ?>
                    </select>
                    <div class="invalid-feedback"><?php echo $translations['html_error_reason_cancellation']; ?></div>
                </div>
                <div class="col-md-12">
                    <label for="input_clave" class="col-form-label"><?php echo $translations['html_observations']; ?></label>
                    
                    <textarea row="2" id="textarea_observaciones_cancelacion" class="form-control"></textarea>
                    <div class="invalid-feedback"><?php echo $translations['html_error_reason_cancellation']; ?></div>
                </div>
            </div>
            <div id="alert_error" class="alert alert-danger align-items-center" role="alert" style="display:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div id="msg_error">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
        <button type="button" id="btnSave" class="btn btn-primary"><?php echo $translations['html_btn_save']; ?></button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="modal_asistencia" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_asistencia"><?php echo FuncionesGlobales::UpperString($translations['html_attendance_status']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_asistencia" class="needs-validation" novalidate>
            <div class="row mb-3">
                <!-- Campo Clave -->
                <div class="col-md-12">
                    <label for="label_estatus_actual" class="col-form-label"><?php echo $translations['html_current_status']; ?>: </label>
                    <label id="label_estatus_actual" class="col-form-label"></label>
                </div>
                <div class="col-md-12">
                    <label for="input_clave" class="col-form-label"><?php echo $translations['html_new_status']; ?></label>
                    <select id="select_asistencia" required>
                        <option></option>
                        <option id="estatus_1" value="1">ASISTENCIA</option>
                        <option id="estatus_2" value="2">RETARDO</option>
                        <option id="estatus_0" value="0">FALTA</option>
                    </select>
                    <div class="invalid-feedback"><?php echo $translations['html_error_attendance_status']; ?></div>
                </div>
            </div>
            <div id="alert_error" class="alert alert-danger align-items-center" role="alert" style="display:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div id="msg_error">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
        <button type="button" id="btnSave" class="btn btn-primary"><?php echo $translations['html_btn_save']; ?></button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade modal-xl" id="modal_save_class" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_agenda_opening"><?php echo FuncionesGlobales::UpperString($translations['html_schedule_an_appointment']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_create" class="needs-validation" novalidate>
            <div class="row mb-3 div_input_paciente">
                <div class="div_select_paciente col-md-12">
                    <label for="select_paciente_modal" class="col-form-label"><?php echo $translations['html_title_patient']; ?></label>
                        <select id="select_paciente_modal" class="select_paciente_modal" required>
                            <option value=""></option>
                        </select>
                    <div class="invalid-feedback"><?php echo $translations['html_error_enter_cellphone_name']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_celular" class="col-form-label"><?php echo $translations['html_cellphone']; ?></label>
                    <input type="text" id="input_celular" name="input_celular" class="form-control" maxLength="10" required />
                    <div class="invalid-feedback"><?php echo $translations['html_error_cellphone']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_primer_apellido" class="col-form-label"><?php echo $translations['html_first_lastname']; ?></label>
                    <input type="text" id="input_primer_apellido" name="input_primer_apellido" class="form-control input_nombres" required />
                    <div class="invalid-feedback"><?php echo $translations['html_error_first_lastname']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_segundo_apellido" class="col-form-label"><?php echo $translations['html_second_lastname']; ?></label>
                    <input type="text" id="input_segundo_apellido" name="input_segundo_apellido" class="form-control input_nombres" />
                    <div class="invalid-feedback"><?php echo $translations['html_second_lastname']; ?></div>
                </div>
                <div class="div_datos_paciente col-md-3" style="display:none;">
                    <label for="input_nombre" class="col-form-label"><?php echo $translations['html_name']; ?></label>
                    <input type="text" id="input_nombre" name="input_nombre" class="form-control input_nombres" required />
                    <div class="invalid-feedback"><?php echo $translations['html_error_name']; ?></div>
                </div>
            </div>
            <div class="row mb-3 div_text_paciente" style="display:none;">
                <div class="col-md-4">
                    <label for="span_paciente" class="col-form-label"><b><?php echo $translations['html_title_patient']; ?>:</b> <span id="span_paciente"></label>
                </div>
                <div class="col-md-4">
                    <label for="span_fecha_cita" class="col-form-label"><b><?php echo $translations['html_appoinment_date']; ?>:</b> <span id="span_fecha_cita"></label>
                </div>
                <div class=" col-md-4 text-right">
                    <label for="input_modify_day" class="col-form-label"><?php echo $translations['html_modify_date']; ?></label>
                    <input type="checkbox" id="input_modify_day" name="input_modify_day" />
                </div>
                <div class="div_cambiar_dia col-md-12 div_header_filters" style="display:none;">
                    <div class="navigation">
                        <!-- Sección izquierda: Botones de Mes, Semana y Día -->
                        <div class="left-section">
                            <button type="button" id="btn-semana-anterior" class="btn btn-secondary"><<</button>
                            <button type="button" id="btn-anterior" class="btn btn-secondary"><</button>
                            <h3 id="fecha-actual"></h3>
                            <button type="button" id="btn-siguiente" class="btn btn-secondary">></button>
                            <button type="button" id="btn-semana-siguiente" class="btn btn-secondary">>></button>
                            <button type="button" id="btn-hoy" class="btn btn-primary"><?php echo $translations['html_today']; ?></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row col-md-12">
                <div class="col-md-6 hide" style="max-height: 50vh;overflow-y: auto;">
                    <div class="container div_header_days_container container-calendar hide_container col-12">
                        <!-- Agenda -->
                        <div class="agenda-container" id="agenda-container">
                            <!-- Header -->
                            <div class="agenda-row agenda-header" id="agenda-header">
                                <div class="agenda-time">Hora</div>
                                <!-- Las columnas de profesionales se generarán dinámicamente aquí -->
                            </div>
                            <!-- Las filas de horas se generarán dinámicamente aquí -->
                        </div>
                    </div>
                </div>
                <div class="div_header_citas col-md-6 hide" style="max-height: 50vh;overflow-y: auto;">
                    <div id="" class="row">
                        <div class="col-md-4" style="padding-right:5px;">
                            <label for="input_hora_inicio" class="col-form-label"><?php echo $translations['html_starting_hour']; ?></label>
                            <input type="time" step="60" class="form-control input_hora_inicio" required>
                            <div class="invalid-feedback"><?php echo $translations['html_error_starting_hour']; ?></div>
                        </div>
                        <!-- Campo Nombre -->
                        <div class="col-md-4" style="padding-right:5px;">
                            <label for="input_hora_termino" class="col-form-label"><?php echo $translations['html_ending_hour']; ?></label>
                            <input type="time" step="60" class="form-control input_hora_termino" required disabled>
                            <div class="invalid-feedback"><?php echo $translations['html_error_ending_hour']; ?></div>
                        </div>
                        <div class="col-md-4 d-flex flex-column align-items-center" align="center">
                            <label for="input_hora_inicio" class="col-form-label"><?php echo $translations['html_options']; ?></label>
                            <button type="button" class="btn btn-outline-dark btn_add_service"><?php echo $translations['html_add_service']; ?></button>
                        </div>
                    </div>
                    <div class="row div_header_labels">
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_service']; ?></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_duration']; ?></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_price']; ?></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_option']; ?></label>
                        </div>
                    </div>
                    <div class="row div_header_servicios">
                    </div>
                    <div class="row div_header_total border-top" align="center">
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><?php echo $translations['html_totals']; ?>:</label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label"><span id="total_duracion">0</span> min</label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            <label class="col-form-label total_costo">$<span id ="total_costo">0</span></label>
                        </div>
                        <div class="col-md-3" style="padding-right:5px;">
                            
                        </div>
                    </div>
                </div>
            </div>
            
            <div id="alert_error" class="alert alert-danger align-items-center" role="alert" style="display:none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
                    <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <div id="msg_error">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
        <button type="button" id="btnSave" class="btn btn-primary"><?php echo $translations['html_btn_save']; ?></button>
      </div>
    </div>
  </div>
</div>

<div id="template_servicio" class="row" style="display:none;">
    <div class="col-md-3" style="padding-right:5px;">
        <select class="select_servicios_modal" required>
            <option></option>
        </select>
        <div class="invalid-feedback"><?php echo $translations['html_error_service']; ?></div>
    </div>
    <div class="col-md-3" style="padding-right:5px;">
        <input type="number" class="form-control duracion" required/>
        <div class="invalid-feedback"><?php echo $translations['html_error_starting_hour']; ?></div>
    </div>
    <div class="col-md-3" style="padding-right:5px;" align="center">
        <span class="costo"></span>
        <div class="invalid-feedback"><?php echo $translations['html_error_starting_hour']; ?></div>
    </div>
    <div class="col-md-3" style="padding-right:5px;" align="center">
        <button type="button" class="btn btn-outline-dark btn_delete_servicio btn-close"></button>
    </div>
</div>

<div class="modal fade" id="modal_info_citas" tabindex="-1" aria-labelledby="label_modal_agenda_opening" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="label_modal_cancelar_cita"><?php echo FuncionesGlobales::UpperString($translations['html_appointment_days']); ?></h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body col-md-12">
        <label>D&iacute;a: <span id="dia_cita"></span></label>
      </div>
      <div class="modal-body col-md-12">
        <form id="form_modal_cancelar_cita" class="needs-validation" novalidate>
            <div class="row mb-3">
                <!-- Campo Clave -->
                <div id="accordion">
                    
                </div>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button id="btn_go_day" type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_go_day']; ?></button>
        <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"><?php echo $translations['html_btn_cancel']; ?></button>
      </div>
    </div>
  </div>
</div>

<!--    ROW DE CITAS DEL DIA -->
<div id="template_cita_dia" class="card" style="display:none;">
    <div class="card-header" id="headingOne">
        <div class="div_header mb-0 btn collapsed d-flex justify-content-between align-items-center" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
            <label class="mb-0">Paciente: <span class="nombre_paciente"></span></label>
            <label class="mb-0">Horario: <span class="horario_cita"></span></label>
        </div>
    </div>

    <div class="collapse" aria-labelledby="headingTwo" data-bs-parent="#accordion">
        <div class="card-body d-flex flex-column">
            <label>Profesional: <span class="nombre_profesional"></span></label>

            <!-- Encabezado de la tabla -->
            <div class="d-flex border-bottom fw-bold py-2 mt-3">
                <div class="flex-fill">Servicio</div>
                <div class="flex-fill">Duración</div>
                <div class="flex-fill">Costo</div>
            </div>

            <!-- Primera fila de datos -->
            <div class="div_header_servicios">
                <!-- <div class="d-flex py-2 border-bottom">
                    <div class="flex-fill servicio">Lenguaje</div>
                    <div class="flex-fill"><span class="duracion"></span> Min</div>
                    <div class="flex-fill costo">$<span clas="costo"></span></div>
                </div> -->
            </div>

            <!-- Total -->
            <div class="d-flex justify-content-end fw-bold py-2 mt-2">
                <div>Total: $<span class="total"></span></div>
            </div>

        </div>
    </div>
</div>

<div id="template_servicio_cita_diaria" class=" py-2 border-bottom hide">
    <div class="flex-fill servicio">Lenguaje</div>
    <div class="flex-fill"><span class="duracion"></span> Min</div>
    <div class="flex-fill costo">$<span clas="costo"></span></div>
</div>

<script>
    //  URL
    const controller    = '/Agenda';
    const url_index     = controller+"/index";

    //  CODIGO PARA CALENDARIO POR SEMANA
    const diasSemana = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"];

    //  HORARIO INHABIL POR SEMANA
    let horario_no_disponible   = {};

    //  RANGO DE HORARIO DE ATENCION
    let min_hora_inicio = '';
    let max_hora_inicio = '';

    //  CITAS AGENDADAS POR SEMANA
    let citas_agendadas = {};

    //  CITAS POR DIA
    let citas_desglosadas   = {};

    //  LISTA PROFESIONALES POR LOCACION
    let profesionales   = {};

    //  language
    const translations  = {
        emptyTable: "<?= $translations['table_no_data'] ?>",
        info: "<?= $translations['showing_info'] ?>",
        infoEmpty: "<?= $translations['no_records'] ?>",
        search: "<?= $translations['search'] ?>",
        paginate: {
            first: "<?= $translations['paginate_first'] ?>",
            last: "<?= $translations['paginate_last'] ?>",
            next: "<?= $translations['paginate_next'] ?>",
            previous: "<?= $translations['paginate_previous'] ?>"
        },
        title_update    : "<?= $translations['html_edit_record'] ?>",
        title_delete    : "<?= $translations['html_delete_record'] ?>",
        title_preview   : "<?= $translations['html_preview_record'] ?>",
        title_change    : "<?= $translations['html_active_deactivate'] ?>",
        confirm_delete  : "<?= $translations['html_confirm_delete']?>",
        schedule_appointments   : "<?= $translations['html_schedule_appointments']?>",
        monday: "<?php echo $translations['html_monday'];     ?>",
        thuesday: "<?php echo $translations['html_thuesday'];   ?>",
        wednesday: "<?php echo $translations['html_wednesday'];  ?>",
        thursday: "<?php echo $translations['html_thursday'];   ?>",
        friday: "<?php echo $translations['html_friday'];     ?>",
        saturday: "<?php echo $translations['html_saturday'];   ?>",      
    };

    //  LISTA DE ERRORES EN MODAL
    const error_list = {
        sin_permisos    : "<?php echo $translations['html_error_empty_list']; ?>",
        error_email     : "<?php echo $translations['html_error_email']; ?>",
        error_celular   : "<?php echo $translations['html_error_cellphone']; ?>",
        error_contrasena    : "<?php echo $translations['html_error_different_password']; ?>",
        error_length_contrasena : "<?php echo $translations['html_error_length_password']; ?>",
        error_spliced           : "<?php echo $translations['html_error_spliced']; ?>",
        error_range_date        : "<?php echo $translations['html_error_range_date']; ?>",
        error_day_spliced       : "<?php echo $translations['html_error_day_spliced']; ?>",
    }

    let count_id_citas  = 0;

    //  dias_programacion_citas
    const dias_programacion_citas = <?php echo $dias_programacion_citas; ?>

    const markedDays    = [14, 25]; 
    let cierre_agenda   = new Date(2025, 3, 30); // Año, Mes (0-indexed), Día
    let exist_apertura_agenda   = false;

    // Array de horas (de 9:00 a 19:00)
    let horas = [];

    // Variables para manejar la fecha
    
    const date_today    = "<?php echo $today; ?>";
    let split_today     = date_today.split('-');
    let fechaActual = new Date(parseInt(split_today[0]), parseInt(split_today[1]) - 1, parseInt(split_today[2]));

    let rango_semana_actual = {
        'fecha_inicio'  : '',
        'fecha_termino' : ''
    };

    //  RETORNA LA CLASE DEL COLOR BACKGROUND DEL DIV FLOTANTE
    function background_tipo_cita(info_cita){
        //  VALOR POR DEFECTO
        let return_background   = 'bg-secondary';

        //  CITA PROGRAMADA
        if (typeof info_cita['id_cita_programada'] != "undefined" && info_cita['id_cita_programada'] != null && info_cita['id_cita_programada'] != ''){
            return 'bg-success';
        }

        //  CITAS AGRUPADAS
        if (typeof info_cita['lista_id_agenda_citas'] != "undefined" && info_cita['lista_id_agenda_citas'] != null && info_cita['lista_id_agenda_citas'] != ''){
            return 'bg-primary';
        }

        //  CITA REAGENDADA
        if (typeof info_cita['id_cita_reagendada'] != "undefined" && info_cita['id_cita_reagendada'] != null && info_cita['id_cita_reagendada'] != ''){
            return 'bg-info';
        }

        // CITA ORDINARIA
        if (typeof info_cita['id_agenda_cita'] != "undefined" && info_cita['id_agenda_cita'] != null && info_cita['id_agenda_cita'] != ''){
            return 'bg-info';
        }

        return return_background;
    }

    // Función para formatear la fecha como "Día, DD/MM/AAAA"
    function formatearFecha(fecha) {
        const opciones = { weekday: 'long', year: 'numeric', month: '2-digit', day: '2-digit' };
        const fechaFormateada = fecha.toLocaleDateString('es-ES', opciones);
        const partes = fechaFormateada.split(', ');
        
        function capitalizarPrimeraLetra(texto) {
            return texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();
        }

        if (partes.length > 1) {
            // Si la fecha incluye coma (formato "día, fecha")
            return capitalizarPrimeraLetra(partes[0]) + ', ' + partes[1];
        } else {
            // Si no hay coma, convertir la primera palabra (asumiendo que es el día)
            const palabras = fechaFormateada.split(' ');
            palabras[0] = capitalizarPrimeraLetra(palabras[0]);
            return palabras.join(' ');
        }
    }


    // Función para actualizar la fecha mostrada
    function actualizarFecha(div_header) {
        console.log('div_header',div_header);
        let div_fecha   = $(div_header).attr("id") == 'div_header_agenda' ? $(".div_principal_filter") : $(div_header);
        $(div_fecha).find("#fecha-actual").text(formatearFecha(fechaActual));

        if (rango_semana_actual.fecha_inicio != ''){
            //  SE VERIFICA QUE LA NUEVA FECHA 
            let fechaInicio = new Date(rango_semana_actual.fecha_inicio + 'T00:00:00');
            let fechaTermino = new Date(rango_semana_actual.fecha_termino + 'T23:59:59');

            // Ahora verificamos si fechaActual está dentro del rango
            if (Object.keys(horario_no_disponible).length > 0){
                if (fechaActual >= fechaInicio && fechaActual <= fechaTermino) {
                    div_header  = $(div_header).hasClass('modal') ? $(div_header) : '#div_header_agenda';
                    $(div_header).find(".div_header_days_container").find('.evento-flotante').remove();
                    let id_profesional  = null;
                    if (div_header == '#div_header_agenda'){
                        console.log('entre if');
                        horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(div_header),rango,background_tipo_cita,'no_disponible'));
                    } else {
                        id_profesional  = $(div_header).find('#span_paciente').data('idprofesional');
                        console.log('entro else');
                        console.log('horario_no_disponible',horario_no_disponible);
                        horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(div_header),rango,background_tipo_cita(rango),'no_disponible',null,true));
                    }
                    
                    citas_desglosadas.forEach(rango => {
                        if (id_profesional == null || rango.id_profesional == id_profesional) {
                            cuadroFlotantesDiario($(div_header), rango, background_tipo_cita(rango), 'flot_cita', null);
                        }
                    });
                    show_horario_no_disponible_profesional($(div_header));
                } else {
                    div_header  = $(div_header).hasClass('modal') ? $(div_header) : null;
                    get_all_appointments($(".filters"),div_header);
                }
            }
            
        }
        
    }

    // Función para convertir una hora en minutos desde las 00:00
    function convertirHoraAMinutos(hora) {
        const [h, m] = hora.split(":").map(Number);
        return h * 60 + m;
    }

    // Función para generar los eventos flotantes PARA CALENDARIO POR DIA
    function cuadroFlotantesDiario(element_header,evento,background,tipo_cuadro,mensaje = null,limit_width = false) {
        let fecha_actual    = formatearFecha(fechaActual);
        fecha_actual        = fecha_actual.split(",");

        const dayIndex          = diasSemana.indexOf(fecha_actual[0]) + 1;
        const eventoDayIndex    = isNaN(evento.day) ? diasSemana.indexOf(evento.day) + 1 : evento.day;
        const profesional       = evento.nombre_profesional;
        const id_profesional    = evento.id_profesional;
        const id_paciente       = evento.id_paciente;

        if (eventoDayIndex != dayIndex){
            return false;
        }

        if ($(element_header).attr('id') == 'div_header_agenda' && tipo_cuadro != 'no_disponible'){

            let id_servicio_filtro      = $(".filters").find('#select_servicios').val()  == null || $(".filters").find('#select_servicios').val() == '' ? null : $(".filters").find('#select_servicios').val();
            let id_profesional_filtro   = $(".filters").find('#select_profesionales').val() == null || $(".filters").find('#select_profesionales').val() == '' ? null : $(".filters").find('#select_profesionales').val();
            let id_paciente_filtro      = $(".filters").find('#select_pacientes').val() == null || $(".filters").find('#select_pacientes').val() == '' ? null : $(".filters").find('#select_pacientes').val();

            if (id_profesional_filtro != null && id_profesional_filtro != id_profesional){
                return false;
            }

            if (id_paciente_filtro != null && id_paciente_filtro != id_paciente){
                return false;
            }

            let servicios   = evento.servicios;

            console.log('servicios',servicios,id_servicio_filtro);

            let has_servicio    = false;
            if (id_servicio_filtro != null){
                for(let i in servicios){
                    if (servicios[i]['id_servicio'] == id_servicio_filtro){
                        has_servicio    = true;
                        //return false;
                    }
                }
            } else {
                has_servicio    = true;
            }
            console.log('has_servicio',has_servicio);
            if (!has_servicio){
                return false;
            }

        }

        // Convertir las horas de inicio y fin a minutos
        const inicioMinutos = convertirHoraAMinutos(evento.start);
        let end = evento.end.split(":");
        let finMinutos  = '';
        if (end[1] == '59'){
            finMinutos  = convertirHoraAMinutos(sumarUnMinuto(evento.end));
        } else {
            finMinutos = convertirHoraAMinutos(evento.end);
        }
        
        //  MENSAJE A MOSTRAR
        if (tipo_cuadro == 'no_disponible'){
            if (mensaje != null){
                mensaje = '<span>'+mensaje+'</span>';
            } else {
                mensaje = '<span>Horario no disponible</span>';
            }
        } else {
            mensaje = '<span>'+evento.nombre_completo+'</span><span>'+evento.start + '-' + evento.end+'</span>'
        }

        // Encontrar la fila correspondiente a la hora de inicio
        const filaInicio = $(element_header).find(`.div_header_days_container .agenda-time:contains('${evento.start.split(":")[0].padStart(2, '0')}:00')`).closest(".agenda-row");
        if (filaInicio.length) {
            let alturaPorHora   = 0; // Cada hora ocupa 100% de altura
            let alturaPorMinuto = 0; // Altura por minuto
            let top             = 0; // Posición vertical
            let altura          = 0; // Altura del evento
            let columnaProfesional  = '';
            if (profesional == null){
                columnaProfesional = filaInicio.find(".agenda-service").eq(0);

                // Calcular la posición y altura del evento
                alturaPorHora = 100; // Cada hora ocupa 100% de altura
                alturaPorMinuto = alturaPorHora / 60; // Altura por minuto

                top = (inicioMinutos % 60) * alturaPorMinuto; // Posición vertical
                altura = ((finMinutos - inicioMinutos) * alturaPorMinuto) + ((((finMinutos - inicioMinutos) * (alturaPorMinuto)) / 100) *2 ); // Altura del evento
                altura  = altura + (Math.floor(altura / 100) * 2);
                if (!limit_width){
                    width = ($("#agenda-header").find(".agenda-service").length * 100) + 1;
                } else {
                    width   = 100;
                }

                // // Crear el evento flotante
                const eventoDiv = $("<div>")
                    .addClass("evento-flotante")
                    .addClass(background)
                    .addClass(tipo_cuadro)
                    .data('horainicio',evento.start)
                    .data('horatermino',evento.end)
                    .html(mensaje)
                    .css({
                        top: `${top}%`, // Posición vertical
                        height: `${altura}%`, // Altura del evento
                        width : `${width}%`
                    });
                columnaProfesional.append(eventoDiv);
            } else {
                // Encontrar la columna correspondiente al profesional
                const profesionalIndex = profesionales.findIndex(p => p.id === evento.id_profesional);
                console.log('profesionalIndex',profesionalIndex);
                if (profesionalIndex !== -1) {
                    console.log('limit_width == true ? 0 : profesionalIndex',$(element_header).hasClass('modal'),$(element_header).hasClass('modal') ? 0 : profesionalIndex);
                    columnaProfesional = filaInicio.find(".agenda-service").eq($(element_header).hasClass('modal') ? 0 : profesionalIndex);
                    console.log('columnaProfesional',columnaProfesional);

                    // Calcular la posición y altura del evento
                    alturaPorHora = 100; // Cada hora ocupa 100% de altura
                    alturaPorMinuto = alturaPorHora / 60; // Altura por minuto

                    top = (inicioMinutos % 60) * alturaPorMinuto; // Posición vertical
                    altura  = (finMinutos - inicioMinutos) * alturaPorMinuto; // Altura del evento
                    altura  = altura + (Math.floor(altura / 100) * 2);

                    // Crear el evento flotante
                    const eventoDiv = $("<div>")
                        .addClass("evento-flotante")
                        .addClass(background)
                        .addClass(tipo_cuadro)
                        .data('idagendacita',evento.id_agenda_cita)
                        .data('idprofesional',id_profesional)
                        .data('profesional',profesional)
                        .data('paciente',evento.nombre_completo)
                        .data('dialabel',diasSemana[dayIndex - 1])
                        .data('duracion',evento.duracion)
                        .data('horainicio',evento.start)
                        .data('horatermino',evento.end)
                        .data('asistencia',evento.asistencia)
                        .html(mensaje)
                        .css({
                            top: `${top}%`, // Posición vertical
                            height: `${altura}%`, // Altura del evento
                        });
                    columnaProfesional.append(eventoDiv);
                }
            }
        }
    }

    function sumarUnMinuto(hora, minutosASumar = 1) {
        // Dividir la hora en horas y minutos
        let [horas, minutos] = hora.split(":").map(Number);

        // Sumar los minutos
        minutos += Number(minutosASumar);

        // Calcular cuántas horas extra hay y ajustar
        horas += Math.floor(minutos / 60);
        minutos = minutos % 60;

        // Ajustar formato de dos dígitos
        horas = horas % 24; // Opcional, si quieres mantenerlo en formato 24 hrs
        let horasFormateadas = horas.toString().padStart(2, "0");
        let minutosFormateados = minutos.toString().padStart(2, "0");

        return `${horasFormateadas}:${minutosFormateados}`;
    }

    // Función para cambiar el día (anterior o siguiente)
    function cambiarDia(dias, nueva_fecha, div_header) {
        console.log('3');
        let last_month = fechaActual.getMonth();
        console.log('4');
        let new_month = last_month;
        console.log('5');

        let nuevaFecha = nueva_fecha ? new Date(nueva_fecha) : new Date(fechaActual);
        console.log('6');
        
        if (dias !== null) {
            nuevaFecha.setDate(nuevaFecha.getDate() + dias);
        }
        console.log('7');

        // Si la nueva fecha es mayor a la fecha límite, no se permite el cambio
        let valida_fechas   = validar_fechas_apertura_agenda(nuevaFecha);
        if (valida_fechas != true){
            showAlert('danger',valida_fechas);
            return false;
        }

        fechaActual = nuevaFecha;
        new_month = fechaActual.getMonth();
        //div_header  = $(div_header).attr('id') == 'div_header_agenda' ? '.div_principal_filter' : '.div_cambiar_dia';
        console.log('antes funcion',div_header);
        actualizarFecha($(div_header));
        
        if (new_month !== last_month) {
            renderCalendarMes();
        }

        //  AL CAMBIAR EL DIA ACTUAL, SE BUSCA LAS CITAS TANTO DE
        //  ESE DIA COMO DEL RANGO DE SEMANA
    }

    function cambiarSemana(semanas,div_header = null) {
        let nuevaFecha = new Date(fechaActual);
        nuevaFecha.setDate(nuevaFecha.getDate() + (7 * semanas));

        let valida_fechas   = validar_fechas_apertura_agenda(nuevaFecha);
        if (valida_fechas != true){
            showAlert('danger',valida_fechas);
            return false;
        }

        fechaActual = nuevaFecha;
        actualizarFecha($(div_header));
        if (!$(div_header).hasClass('modal')){
            renderCalendarMes();
        }
    }

    // Función para cambiar de mes
    function cambiarMes(meses) {
        let nuevaFecha = new Date(fechaActual);
        nuevaFecha.setMonth(nuevaFecha.getMonth() + meses);

        // Verifica que la nueva fecha no exceda la fecha límite
        let valida_fechas   = validar_fechas_apertura_agenda(nuevaFecha);
        if (valida_fechas != true){
            showAlert('danger',valida_fechas);
            return false;
        }

        fechaActual = nuevaFecha;
        actualizarFecha();
        renderCalendarMes();
    }

    // Función para volver al día actual
    function irAFechaActual() {
        fechaActual = new Date(); // Reiniciar a la fecha de hoy
        actualizarFecha();
        renderCalendarMes();
    }


    //  funcion para renderizar calendario por mes  
    function renderCalendarMes() {
        const $calendarContainer = $('.div_header_month_container');
        const $monthYear = $calendarContainer.find('#monthYear');
        const $dates = $calendarContainer.find('#calendar_month_dates');
        const $prevMonthButton = $calendarContainer.find('#prevMonth');
        const $nextMonthButton = $calendarContainer.find('#nextMonth');
        const year  = fechaActual.getFullYear();
        const month = fechaActual.getMonth();
        const today = new Date();

        //$monthYear.text(`${currentDate.toLocaleString('es', { month: 'long' })} ${year}`);
        $dates.empty();

        const firstDayOfMonth = new Date(year, month, 1);
        const lastDayOfMonth = new Date(year, month + 1, 0);
        const daysInMonth = lastDayOfMonth.getDate();
        const startingDay = firstDayOfMonth.getDay();
        const prevMonthLastDay = new Date(year, month, 0).getDate();
        

        // Días del mes anterior
        for (let i = startingDay - 1; i >= 0; i--) {
            let day = prevMonthLastDay - i;
            let classList = "other-month";
            if (new Date(year, month - 1, day).getDay() === 0) classList += " disabled";
            classList   += ' div_month_day';
            let create_date = new Date(year, month - 1, day);
            
            if (create_date > cierre_agenda) continue; // No agregar días después del cierre

            $(".div_header_month_container #calendar_month_dates").append(`<div class="${classList}" data-day="${year}-${rellenar_fecha(month)}-${rellenar_fecha(day)}">${day}</div>`);
        }

        // Días del mes actual
        for (let i = 1; i <= daysInMonth; i++) {
            const $dateElement = $('<div>').text(i);
            const dayOfWeek = new Date(year, month, i).getDay();
            let classList   = '';
            if (year === today.getFullYear() && month === today.getMonth() && i === today.getDate()) {
                classList   += 'current-day ';
            }

            if (dayOfWeek === 0) {
                classList   +=  'disabled ';
            }

            classList   += 'div_month_day';

            $(".div_header_month_container #calendar_month_dates").append(`<div class="${classList}" data-day="${year}-${rellenar_fecha(month + 1)}-${rellenar_fecha(i)}">${i}</div>`);

            // Marcar días especiales si quieres
            // if (markedDays.includes(i)) {
            //   $dateElement.addClass('marked-day');
            // }
        }

        // Días del mes siguiente
        const totalCells = 35;
        const remainingCells = totalCells - (startingDay + daysInMonth);
        for (let i = 1; i <= remainingCells; i++) {
            const dayOfWeek = new Date(year, month + 1, i).getDay();
            const $dateElement = $('<div>').text(i).addClass('other-month');
            if (dayOfWeek === 0) {
                $dateElement.addClass('disabled');
            }
            $dateElement.addClass('div_month_day');
            $dateElement.data('day',year+'-'+(month + 2)+'-'+i);
            $dates.append($dateElement);
        }     
    }

    function rellenar_fecha(i) {
        let num_return = i.toString(); // Convertimos a string por si es número

        if (num_return.length === 1) { 
            num_return = '0' + num_return; 
        }

        return num_return;
    }

    function get_rango_semana(fechaString) {
        let año, mes, dia;

        if (fechaString instanceof Date) {
            // Si es un objeto Date, extraer los valores directamente
            año = fechaString.getFullYear();
            mes = fechaString.getMonth() + 1; // Meses van de 0 a 11
            dia = fechaString.getDate();
        } else {
            // Si es string, parsearlo
            [año, mes, dia] = fechaString.split("-").map(Number);
        }

        const fechaObj = new Date(año, mes - 1, dia);

        const diaSemana = fechaObj.getDay();

        const lunes = new Date(fechaObj);
        lunes.setDate(fechaObj.getDate() - (diaSemana === 0 ? 6 : diaSemana - 1));

        const domingo = new Date(fechaObj);
        domingo.setDate(fechaObj.getDate() + (diaSemana === 0 ? 0 : 7 - diaSemana));

        const formatoFecha = (fecha) => {
            const y = fecha.getFullYear();
            const m = String(fecha.getMonth() + 1).padStart(2, '0');
            const d = String(fecha.getDate()).padStart(2, '0');
            return `${y}-${m}-${d}`;
        };

        rango_semana_actual['fecha_inicio'] = formatoFecha(lunes);
        rango_semana_actual['fecha_termino'] = formatoFecha(domingo);
    }


    function show_horario_no_disponible_profesional(div_header = null){
        //  SE PINTA EL HORARIO NO DISPONIBLE POR PROFESIONAL POR DIA
        let header_id_profesional   = null;
        console.log("$(div_header).hasClass('modal')",$(div_header).hasClass('modal'),div_header != null && $(div_header).hasClass('modal'));
        if (div_header != null && $(div_header).hasClass('modal')){
            header_id_profesional   = $(div_header).find('#span_paciente').data('idprofesional');
            console.log('aqui ver',header_id_profesional);
        }
        console.log('profesionales',profesionales);
        for(let i in profesionales){
            let rango_no_disponible = profesionales[i]['rango_no_disponible'];
            let nombre_completo = profesionales[i]['nombre_completo'];
            let id_profesional  = profesionales[i]['id'];
            console.log('id_profesional if',id_profesional)

            if (header_id_profesional != null && id_profesional != header_id_profesional){
                //return true;
            }
            console.log('pase if',profesionales[i]);

            if (header_id_profesional == null || id_profesional == header_id_profesional){
                rango_no_disponible.forEach(rango => {
                    // Agregamos la propiedad nombre_completo al objeto rango
                    rango.nombre_profesional    = nombre_completo;
                    rango.id_profesional        = id_profesional;
                    // Llamamos a la función con el rango modificado
                    if (div_header == null){
                        cuadroFlotantesDiario($("#div_header_agenda"),rango, background_tipo_cita(rango), 'no_disponible','Profesional no disponible');
                    } else {
                        cuadroFlotantesDiario($(div_header),rango, background_tipo_cita(rango), 'no_disponible','Profesional no disponible');
                    }
                });
            }
            
        }
    }

    //  FUNCTION PARA MOSTRAR INFORMACION AL SELECCIONAR UNA LOCACION
    function show_calendar(modal_clone,data,id_locacion){
        let min_hora_inicio = parseInt(data['min_hora_inicio']);
        let max_hora_inicio = parseInt(data['max_hora_inicio']);
        profesionales       = data['all_professionals'];
        console.log('data');
        console.log(data);

        let tmp_cierre_fecha    = data['cierre_agenda']['last_fecha_limite'];
        tmp_cierre_fecha        = data['cierre_agenda']['last_fecha_limite'].split('-');
        cierre_agenda           = new Date(tmp_cierre_fecha[0],tmp_cierre_fecha[1] - 1,tmp_cierre_fecha[2]);
        exist_apertura_agenda   = data['cierre_agenda']['has_record'];

        horas   = [];
        for (let i = min_hora_inicio; i <= max_hora_inicio; i++) {
            horas.push(`${i.toString().padStart(2, '0')}:00`);
        }

        const $weekContainer = $(modal_clone);
        show_hours($weekContainer,$("#div_header_agenda"),data['min_hora_inicio'],data['max_hora_inicio'],profesionales,null);
        horario_no_disponible   = data['rangos_no_incluidos'];

        console.log(horario_no_disponible);

        horario_no_disponible.forEach(evento => cuadroFlotantesSemana(evento,background_tipo_cita(evento),$weekContainer.find(".week-container"),'flot_locacion'));
        horario_no_disponible.forEach(rango => cuadroFlotantesDiario($("#div_header_agenda"),rango,background_tipo_cita(rango),'no_disponible'));
        
        show_horario_no_disponible_profesional();
        

        //  SE PINTAN LAS CITAS DE TODA LA SEMANA
        citas_agendadas = {};
        citas_agendadas = unificarCitasAgendadas(data['citas_agendadas']);//typeof (data['citas_unificadas']) ? data['citas_unificadas'] : data['citas_agendadas'];
        citas_desglosadas   = data['citas_agendadas'];

        citas_agendadas.forEach(evento => cuadroFlotantesSemana(evento,background_tipo_cita(evento),$weekContainer.find(".week-container"),'flot_cita'));
        citas_desglosadas.forEach(rango => cuadroFlotantesDiario($("#div_header_agenda"),rango,background_tipo_cita(rango),'flot_cita',null));

        $(modal_clone).find('#select_profesionales_modal').data('minhora',data['min_hora_inicio']);
        $(modal_clone).find('#select_profesionales_modal').data('maxhora',data['max_hora_inicio']);

        $(modal_clone).find('#select_profesionales_modal').prop('disabled',true).val(null).trigger('change');
        $(modal_clone).find('#select_profesionales_modal').find('option').remove().append('<option></option>');

        $(modal_clone).find('#select_servicios_modal').prop('disabled',false);

        if (!$(".div_header_days_container").is(':visible') && 
            !$("#div_header_week_container").is(':visible') &&
            !$(".div_header_month_container").is(':visible')){
                $("#btn-dia").trigger('click');
            }
    }

    //  FUNCION PARA OBTENER LAS CITAS DEL RANGO DE FECHAS
    function get_all_appointments(element,modal_clone = null,refresh_filtros = null){
        console.log('modal_clone',modal_clone);
        if (modal_clone != null){
            $(modal_clone).find('.evento-flotante').remove();
        } else {
            $(".div_header_days_container").find('.evento-flotante').remove();
            $(".div_header_week_container").find('.flot_cita').remove();
        }
        
        get_rango_semana(fechaActual);
        const id_locacion       = $(element).find("#select_locaciones").val();
        const id_servicio       = $(element).find("#select_servicios").val();
        const id_profesional    = $(element).find("#select_profesionales").val();
        const id_paciente       = $(element).find("#id_paciente").val();
        $.ajax({
            url     : url_index,
            method  : 'post',
            data    : {
                accion          : 'get_info_locacion',
                id_locacion     : id_locacion,
                rango_fechas    : rango_semana_actual
            },
            success : function(data){
                console.log('data info 1');
                console.log(data);
                if (modal_clone == null){
                    min_hora_inicio = data.min_hora_inicio;
                    max_hora_inicio = data.max_hora_inicio;
                    
                    if (refresh_filtros != null){
                         //  SE LLENAN LOS SELECTS
                        let options = '<option></option>';
                        for(let i in data['all_services']){
                            let row = data['all_services'][i];
                            options += '<option value="'+row["id"]+'">'+row["nombre"]+'</option>';
                        }
                        $("#select_servicios").find('option').remove();
                        $("#select_servicios").append(options);

                        options = '<option></option>';
                        for(let i in data['all_professionals']){
                            let row = data['all_professionals'][i];
                            options += '<option value="'+row["id"]+'">'+row["nombre_completo"]+'</option>';
                        }
                        $("#select_profesionales").find('option').remove();
                        $("#select_profesionales").append(options);
                    }

                    // $(modal_clone).find('.floating-box').remove();
                    setTimeout(show_calendar($("#div_header_agenda"),data,id_locacion),500);
                } else {
                    //  CODIGO CUANDO EL EVENTO VIENE DESDE UN MODAL
                    $(modal_clone).find('.evento-flotante').remove();
                    citas_desglosadas   = data['citas_agendadas'];
                    horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'no_disponible',null,true));
                    citas_desglosadas.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'flot_cita',null));
                    show_horario_no_disponible_profesional($(modal_clone));
                    setTimeout(calcula_totales($(modal_clone),$(modal_clone).find('#span_paciente').data('idprofesional'),$(modal_clone).find('#span_paciente').data('idagendacita')),500);
                }
                
                
            },
            error   : function(error){
                console.log('error');
                console.log(error);

                showAlert('danger',error.responseText);

                $(".div_principal_filter").find('.grid-hours').remove();
                $(".div_principal_filter").find('.hour').remove();
                $(".div_principal_filter").find('.floating-box').remove();

                $(".div_principal_filter").find('#select_servicios_modal').val(null).trigger('change');
                $(".div_principal_filter").find('#select_servicios_modal').prop('disabled',true).find('option').remove();

                $(".div_principal_filter").find('#select_profesionales_modal').val(null).trigger('change');
                $(".div_principal_filter").find('#select_profesionales_modal').prop('disabled',true).find('option').remove();
            }
        });
    }

    function show_hours(header_agenda,div_days,min_hora_inicio,max_hora_inicio,profesionales,horario_no_disponible_prof = null){
        //  CONTENEDOR DE LA AGENDA POR SEMANA
        let $weekContainer  = header_agenda.find(".week-container");
        $weekContainer.find('.hour').remove();
        $weekContainer.find('.grid-hours').remove();

        //  CONTENEDOR DE LA AGENDA POR DIA
        let agendaContainer = $(header_agenda).find("#agenda-container");
        $(agendaContainer).find('.row_info').remove();
        $(agendaContainer).find('#agenda-header').find('.agenda-service').remove();

        horas   = [];
        for (let i = min_hora_inicio; i <= max_hora_inicio; i++) {
            horas.push(`${i.toString().padStart(2, '0')}:00`);
        }

        //  PARA EL CONTENEDOR DE AGENDA POR DIA
        let row_fila        = '';
        let agendaHeader    = $(div_days).find(".div_header_days_container #agenda-header");
        profesionales.forEach(profesional => {
            row_fila    += '<div class="agenda-service agenda-hours" data-idprofesional="'+profesional.id+'"></div>';

            let servicios   = 'Servicios: \n';
            for(let i in profesional.servicios){
                servicios   += '*'+profesional.servicios[i]['nombre']+'\n';
            }

            const columna = $('<div>')
                .addClass("agenda-service")
                .text(profesional.nombre_completo)
                .prop('title',servicios);
            agendaHeader.append(columna);
        });

        horas.forEach((hora, index) => {
            $weekContainer.append(`<div class="grid-item hour">${hora}</div>`);
            for (let i = 0; i < 7; i++) {
                let dia     = diasSemana[i];
                
                let num_dia = '';

                if ( i < 6 ){
                    num_dia = calculaFechaPorDia(rango_semana_actual.fecha_inicio,(i + 1))
                } else {
                    num_dia = calculaFechaPorDia(rango_semana_actual.fecha_termino,0)
                }

                $weekContainer.append('<div class="grid-item grid-hours" data-dia="'+dia+'" data-horainicio="'+hora+'" data-day="'+num_dia+'"></div>');
            }

            const fila = $("<div>").addClass("agenda-row").addClass('row_info');

            // Columna de la hora
            const columnaHora = $("<div>")
                .addClass("agenda-time")
                .text(hora);
            fila.append(columnaHora);

            fila.append(row_fila);

            // Añadir la fila al contenedor
            agendaContainer.append(fila);
        });

        if (horario_no_disponible_prof){
            console.log('profesionales',profesionales);
            let id_profesional  = profesionales[0]['id'];
            horario_no_disponible_prof.forEach(rango => cuadroFlotantesDiario($(div_days),rango,background_tipo_cita(rango),'no_disponible',null,true));
            horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(div_days),rango,background_tipo_cita(rango),'no_disponible',null,true));
            citas_desglosadas.forEach(rango => {
                if (rango.id_profesional == id_profesional) {
                    cuadroFlotantesDiario($(div_days), rango, background_tipo_cita(rango), 'flot_cita', null);
                }
            });
        }
    }

    function calculaFechaPorDia(fecha, dias_a_sumar) {
        const fechaObj = new Date(fecha);
        fechaObj.setDate(fechaObj.getDate() + dias_a_sumar);

        const año = fechaObj.getFullYear();
        const mes = String(fechaObj.getMonth() + 1).padStart(2, '0'); // los meses van de 0 a 11
        const dia = String(fechaObj.getDate()).padStart(2, '0');

        return `${año}-${mes}-${dia}`;
    }

    function cuadroFlotantesSemana(evento,background,$weekContainer,tipo_flot,id_horario_cita = '') {
    
        if (id_horario_cita != ''){
            $($weekContainer).find('#'+id_horario_cita).remove();
        }

        let { start, end, day, duracion = null,id_agenda_cita = null,nombre_completo = null,nombre_profesional = null,lista_id_agenda_citas = null,fecha_cita } = evento;

        const dayIndex  = isNaN(day) ? diasSemana.indexOf(day) + 1 : day;
        const duracion_minutos  = duracion == null ? $($weekContainer).closest("#form_modal_create").find('#select_servicios_modal').find('option:selected').data('duracionminutos') : duracion;

        if ( (id_horario_cita != null && id_agenda_cita != null) && id_horario_cita == id_agenda_cita){
            return true;
        }
        
        if (lista_id_agenda_citas == null){
            lista_id_agenda_citas   = [id_agenda_cita];
        }

        lista_id_agenda_citas   = JSON.stringify(lista_id_agenda_citas);
        
        //  ANTES DE CONTINUAR SE DEBE DE VERIFICAR QUE NO EXISTA
        //  NINGUN TIPO DE EMPALMADO ENTRE NINGUN CUADRO FLOTANTE
        //TODO VERIFICAR QUE LAS HORAS NO SE EXCEDAN DEL HORARIO DE ATENCION DEL LOCAL
        let span_info       = '';
        let data_paciente   = '';
        if (tipo_flot == 'flot_cita'){
            if ($($weekContainer).hasClass('div_principal')){
                span_info   = '<span>'+nombre_completo+'</span><span>'+start + '-' + end+'</span>'
            }
            let existe_horario_disponinle  = false;
            $($weekContainer).find('.dia_'+dayIndex).each(function(){
                let flag_empalmados     = verificarEmpalmado($weekContainer,dayIndex,start,end);
                if (flag_empalmados['flag_empalmados']){
                    start   = flag_empalmados['hora_termino_empalmado'];
                    const [horas, minutos] = start.split(':').map(Number);
                    // Crear un objeto Date con la fecha actual y la hora extraída
                    const fecha = new Date();
                    fecha.setHours(horas);
                    fecha.setMinutes(minutos);
                    fecha.setMinutes(fecha.getMinutes() + duracion_minutos);

                    // Obtener la nueva hora en formato "HH:MM"
                    end = `${fecha.getHours().toString().padStart(2, '0')}:${fecha.getMinutes().toString().padStart(2, '0')}`;
                } else {
                    existe_horario_disponinle   = true;
                    return false;
                }
            });
            
            if (!existe_horario_disponinle){
                console.log('evento',evento);
                console.log('alert stop');
            }

            //  SE VERIFICA QUE LA HORA DE INICIO Y TERMINO NO ESTEN FUERA
            //  DEL RANGO DEL HORARIO DE ATENCION
            //  SE VERIFICA QUE NO EXISTA EMPALADO DE LA HORA INICIAL

            let hora_inicio         = '';
            let hora_termino        = '';

            let tmp_first_row   = true;
            $($weekContainer).find('.hour').each(function(){
                if (tmp_first_row){
                    hora_inicio     = $(this).text();
                    tmp_first_row   = false;
                }

                hora_termino    = $(this).text();
            })

            let hora_inicio_header  = convertirHoraATiempo(start);
            let hora_termino_header = convertirHoraATiempo(end);
            hora_inicio             = convertirHoraATiempo(hora_inicio);
            hora_termino            = convertirHoraATiempo(hora_termino);
            
            let flag_fuera_rango    = false;
            if (hora_inicio_header >= hora_termino || hora_inicio_header < hora_inicio){
                flag_fuera_rango    = true;
            }

            if (hora_termino_header < hora_inicio || hora_termino_header > hora_termino){
                flag_fuera_rango    = true;
            }

            //  SI EXISTE FUERA DE RANGO, SE ELIMINA EL FLOTANTE Y EL CONTENEDOR
            //  DE LA CITA
            if (flag_fuera_rango){
                showAlert('danger','Fechas fuera de rango del horario de atenci&oacute;n');
                $($weekContainer).closest('#form_modal_create').find(".header_row#"+id_horario_cita).remove();
                $($weekContainer).closest('#form_modal_create').find(".floating-box#"+id_horario_cita).remove();
                $($weekContainer).closest('#form_modal_create').find('#btn_add_appoitment').trigger('click');
                return false;
            }
            
            if (id_horario_cita != ''){
                $($weekContainer).closest('#form_modal_create').find(".header_row#"+id_horario_cita).find('.input_hora_inicio').val(start);
                $($weekContainer).closest('#form_modal_create').find(".header_row#"+id_horario_cita).find('.input_hora_termino').val(end);
            }

            //  se construye string de las datas a mostrar
            data_paciente   = ' data-paciente="'+evento.nombre_completo+'" data-asistencia="'+evento.asistencia+'"';
        }

        if (tipo_flot == 'flot_locacion'){
            span_info   = '<span>Horario no disponible</span>';
        }

        if (tipo_flot == 'flot_profesional'){
            if (background == 'bg-secondary'){
                span_info   = '<span>Profesional no disponible</span>';
            }

            if (background == 'bg-success'){
                span_info   = '<span>Ocupado</span>';
            }
        }
        

        const startHourIndex = horas.findIndex(hora => hora.startsWith(start.split(":")[0]));
        const endHourIndex = horas.findIndex(hora => hora.startsWith(end.split(":")[0]));

        const startOffset = parseFloat(start.split(":")[1]) / 60;
        const endOffset = parseFloat(end.split(":")[1]) / 60;

        const cellHeight = 70;
        const cellWidth = 120;
        const borderSize = 1;

        const top = ((startHourIndex + startOffset) * (cellHeight + borderSize)) + 72;
        const height = (((endHourIndex - startHourIndex) + (endOffset - startOffset)) * cellHeight + ((endHourIndex - startHourIndex) * borderSize));

        const left = ((dayIndex) * (cellWidth + borderSize)) + 2;
        const width = cellWidth;
        let id_floating = id_agenda_cita == null ? 'id_horario_cita_'+(count_id_citas) : 'id_horario_cita_'+id_agenda_cita;

        if (tipo_flot == 'flot_locacion' || tipo_flot == 'flot_profesional'){
            id_floating = '';
        }

        const $floatingBox = $('<div id="'+id_floating+'" class="floating-box '+background+' '+tipo_flot+' dia_'+dayIndex+'" '+data_paciente+' data-dia="'+dayIndex+'" data-dialabel="'+(diasSemana[day - 1])+'" data-duracion="'+duracion_minutos+'" data-horainicio="'+start+'" data-horatermino="'+end+'" data-profesional="'+nombre_profesional+'" data-idagendacita="'+id_agenda_cita+'" data-listaidagendacitas="'+lista_id_agenda_citas+'" data-day="'+fecha_cita+'">'+span_info+'</span></div>').css({
            top: `${top}px`,
            left: `${left}px`,
            width: `${width - borderSize}px`,
            height: `${height - borderSize}px`,
        });

        $weekContainer.append($floatingBox);
    }

    function show_modal_cancelar_cita(element){
        let modal_clone     = $("#modal_cancelar_cita").clone().removeAttr('id').show();
        let id_agenda_cita  = $(element).data('idagendacita');

        $(modal_clone).on('click','#btnSave',function(){
            let btn = $(this);
            $(btn).prop('disabled',true);
            const form = $(modal_clone).find('#form_modal_cancelar_cita')[0]; // Obtén el elemento DOM
            let flag_error  = false;
            if (form.checkValidity() === false) {
                $(form).addClass('was-validated');
                flag_error  = true;
            } else {
                $(form).removeClass('was-validated');
            }

            if (flag_error){
                $(btn).prop('disabled',false);
                return false;
            }

            $.ajax({
                url         : url_index,
                method      : 'post',
                dataType    : 'json',
                data        : {
                    accion          : 'cancelar_cita',
                    id_agenda_cita  : id_agenda_cita,
                    id_motivo_cancelacion       : $(modal_clone).find("#select_motivo_cancelacion").val(),
                    observaciones_cancelacion   : $(modal_clone).find("#textarea_observaciones_cancelacion").val(),
                    id_agenda_cita              : $(element).data('idagendacita')
                },
                success     : function(data){
                    $(modal_clone).modal('hide');
                    showAlert('success','Cita cancelada');

                    $(".flot_cita").each(function(){
                        if ($(this).data('idagendacita') == id_agenda_cita){
                            $(this).remove();
                        }
                    });

                    $(modal_clone).find('#btnSave').prop('disabled',false);
                },
                error     : function(error){
                    $(modal_clone).find('#btnSave').prop('disabled',false);
                }
            });
        });

        $(modal_clone).find('#select_motivo_cancelacion').select2({
            placeholder: 'Seleccione una opción',
            dropdownParent: $(modal_clone),
            width: '50px'
        });

        $(modal_clone).modal('show');
    }

    function show_modal_asistencia(element){
        let estatus_actual  = $(element).data('asistencia');
        let id_agenda_cita  = $(element).data('idagendacita');
        let modal_clone = $("#modal_asistencia").clone().show();

        let estatus_asistencia  = {
            '1' : 'ASISTENCIA',
            '2' : 'RETARDO',
            '0' : 'FALTA' 
        }

        $(modal_clone).find('#select_asistencia').find('option').prop('disabled',false);
        $(modal_clone).find('#select_asistencia').find('#estatus_'+estatus_actual).prop('disabled',true);
        $(modal_clone).find('#label_estatus_actual').text(estatus_asistencia[estatus_actual]);

        $(modal_clone).find('#select_asistencia').select2({
            placeholder: 'Seleccione una opción',
            dropdownParent: $(modal_clone),
            width: '50px'
        });

        $(modal_clone).on('click','#btnSave',function(){
            let btn = $(this);
            $(btn).prop('disabled',true);
            const form = $(modal_clone).find('#form_modal_asistencia')[0]; // Obtén el elemento DOM
            let flag_error  = false;
            if (form.checkValidity() === false) {
                $(form).addClass('was-validated');
                flag_error  = true;
            } else {
                $(form).removeClass('was-validated');
            }

            if (flag_error){
                $(btn).prop('disabled',false);
                return false;
            }

            $.ajax({
                url         : url_index,
                method      : 'post',
                dataType    : 'json',
                data        : {
                    accion          : 'modificar_asistencia',
                    id_agenda_cita  : id_agenda_cita,
                    estatus_asistencia_actual   : estatus_actual,
                    nuevo_estatus_asistencia    : $(modal_clone).find("#select_asistencia").val()
                },
                success     : function(data){
                    $(".flot_cita").each(function(){
                        if ($(this).data('idagendacita') == id_agenda_cita){
                            $(this).data('asistencia',$(modal_clone).find("#select_asistencia").val());
                        }
                    });

                    $(modal_clone).modal('hide');
                    showAlert('success','Asistencia modificada!');
                },
                error     : function(error){
                    $(modal_clone).find('#btnSave').prop('disabled',false);
                }
            });
        });

        $(modal_clone).modal('show');
    }

    //  CALCULA EL TOTAL DE DURACION Y COSTO POR CITA
    function calcula_totales(modal_clone,id_profesional,id_agenda_cita = -1){
        //  TOTALES
        let total_duracion  = 0;
        let total_costo     = 0;

        $(modal_clone).find('.header_servicio').each(function(){
            let val_duracion    = $(this).find('.duracion').val() != null && $(this).find('.duracion').val() != '' ? $(this).find('.duracion').val() : 0;
            let val_costo       = $(this).find('.costo').text() != null && $(this).find('.costo').text() != '' ? $(this).find('.costo').text() : 0;
            total_duracion      = parseInt(total_duracion) + parseInt(val_duracion);
            total_costo         = (parseFloat(total_costo) + parseFloat(val_costo)).toFixed(2);
        });

        $(modal_clone).find('#total_duracion').text(total_duracion);
        $(modal_clone).find('#total_costo').text(total_costo);
        let segundo_apellido    = $(modal_clone).find('#input_segundo_apellido').val() != null && $(modal_clone).find('#input_segundo_apellido').val() != '' ? $(modal_clone).find('#input_segundo_apellido').val() : ''; 
        let nombre_completo     = $(modal_clone).find('#input_primer_apellido').val() + ' ' + segundo_apellido +' '+$(modal_clone).find('#input_nombre').val()
        nombre_completo         = nombre_completo.trim();
        
        if (nombre_completo == ''){
            nombre_completo = 'S/N';
        }

        //  SE CALCULA LA HORA DE TERMINO
        let input_hora_inicio   = $(modal_clone).find('.input_hora_inicio').val();
        if ($(modal_clone).find('.input_hora_inicio').val() != null && $(modal_clone).find('.input_hora_inicio').val() != ''){
            let hora_inicio = verificarHoraInicio(modal_clone,input_hora_inicio,sumarUnMinuto(input_hora_inicio,total_duracion),id_agenda_cita,total_duracion);
            if (hora_inicio['excede_horario'] == true){
                showAlert('danger','El valor ingresado esta fuera del horario de atenci&oacute;n');
                $(modal_clone).find('.input_hora_inicio').val('');
                $(modal_clone).find('.input_hora_termino').val('');
                return false;
            } else {
                if (input_hora_inicio != hora_inicio['hora_termino_empalmado']){
                    $(modal_clone).find('.input_hora_inicio').val(hora_inicio['hora_termino_empalmado']);
                    input_hora_inicio   = hora_inicio['hora_termino_empalmado'];
                }
            }
            
            $(modal_clone).find('.input_hora_termino').val(sumarUnMinuto(input_hora_inicio,total_duracion));
            let profesional = profesionales.find(row => row.id == id_profesional);
            let text_day    = formatearFecha(fechaActual);
            text_day        = text_day.split(",")[0];
            let evento  = {
                start   : $(modal_clone).find('.input_hora_inicio').val(),
                end     : $(modal_clone).find('.input_hora_termino').val(),
                day     : text_day,
                nombre_completo : nombre_completo,
                nombre_profesional  : profesional['nombre_completo'],
                id_agenda_cita      : id_agenda_cita,
                duracion            : total_duracion,
                asistencia          : 1,
                id_profesional      : id_profesional
            };
            
            //  SE BORRA EL REGISTREO ACTUAL -1 
            $(modal_clone).find('.flot_cita').each(function(){
                if ($(this).data('idagendacita') == id_agenda_cita){
                    $(this).remove();
                    return false;
                }
            })
            cuadroFlotantesDiario(modal_clone,evento,background_tipo_cita(evento),'flot_cita',null,true);
        }
    }

    function verificarEmpalmado($weekContainer,dayIndex,start,end){
        let hora_inicio_header  = convertirHoraATiempo(start);
        let hora_termino_header = convertirHoraATiempo(end);
        let flag_empalmados         = false;
        let hora_termino_empalmado  = '';
        $($weekContainer).find('.dia_'+dayIndex).each(function(){
            console.log('-----------    dentro del foreach  ---------------');
            let hora_inicio     = convertirHoraATiempo($(this).data('horainicio'));
            let hora_termino    = convertirHoraATiempo($(this).data('horatermino'));
            

            //  SE VERIFICA QUE NO EXISTA EMPALADO DE LA HORA INICIAL
            if (hora_inicio_header >= hora_inicio && hora_inicio_header < hora_termino){
                console.log('empalmado hora_inicio_header');
                flag_empalmados         = true;
                hora_termino_empalmado  = $(this).data('horatermino');
                return false;
            }

            //  SE VERIFICA EL EMPALMADO CON LA HORA DE TERMINO
            if (hora_termino_header > hora_inicio && hora_termino_header <= hora_termino){
                console.log('empalmado hora termino');
                flag_empalmados         = true;
                hora_termino_empalmado  = $(this).data('horatermino');
                return false;
            }

            //  EXISTE UN EMPALMADO POR LO CUAL SE DEBE DE RECALCULAR 
            //  LA HORA INICIO Y TERMINO 
             
            if (flag_empalmados){
                return false;
            }
        });

        return {
            flag_empalmados : flag_empalmados,
            hora_termino_empalmado  : hora_termino_empalmado
        };
    }


    //  CALCULA LA HORA INICIO EN BASE A LA SOLICITADA Y QUE NO ESTE EMPALMADA
    function verificarHoraInicio(modal_clone,start,end,id_agenda_cita = null,duracion){
        let hora_inicio_header  = convertirHoraATiempo(start);
        let hora_termino_header = convertirHoraATiempo(end);
        let flag_empalmados         = false;
        let hora_termino_empalmado  = '';
        console.log('id_agenda_cita antes de veriricar',id_agenda_cita);
        console.log('horas header',hora_inicio_header,hora_termino_header);

        $(modal_clone).find('.evento-flotante').each(function(){
            let element = $(this);
            console.log('-----------    dentro del foreach  verificarHoraInicio---------------');
            console.log("$(element).data('idagendacita')",$(element).data('idagendacita'));
            
            if ($(element).data('idagendacita') != "undefined" && $(element).data('idagendacita') === id_agenda_cita){
                return true;
            }
            console.log('hodas antes convert',$(element).data('horainicio'),$(element).data('horatermino'));
            let hora_inicio     = convertirHoraATiempo($(element).data('horainicio'));
            let hora_termino    = convertirHoraATiempo($(element).data('horatermino'));
            console.log('horas row',hora_inicio,hora_termino);

            if (hora_termino < hora_inicio_header){
                console.log('aqui return')
                return true;
            }

            //  SE VERIFICA QUE NO EXISTA EMPALADO DE LA HORA INICIAL
            if (hora_inicio_header >= hora_inicio && hora_inicio_header < hora_termino){
                console.log('empalmado hora_inicio_header');
                flag_empalmados     = true;
                hora_inicio_header  = hora_termino;
                hora_termino_header = convertirHoraATiempo(sumarUnMinuto($(element).data('horatermino'),duracion));
                hora_termino_empalmado  = $(element).data('horatermino');
                return true;
            }

            //  SE VERIFICA EL EMPALMADO CON LA HORA DE TERMINO
            if (hora_termino_header > hora_inicio && hora_termino_header <= hora_termino){
                console.log('empalmado hora termino');
                flag_empalmados     = true;
                hora_inicio_header  = hora_termino;
                hora_termino_header = convertirHoraATiempo(sumarUnMinuto($(element).data('horatermino'),duracion));
                hora_termino_empalmado  = $(element).data('horatermino');
                return true;
            }

            if (hora_inicio_header < hora_inicio && hora_termino_header > hora_termino){
                console.log('empalmado maximo');
                flag_empalmados     = true;
                hora_inicio_header  = hora_termino;

                hora_termino_header = convertirHoraATiempo(sumarUnMinuto($(element).data('horatermino'),duracion));
                hora_termino_empalmado  = $(element).data('horatermino');
                return true;
            }

            return false;
        });

        if (!flag_empalmados){
            hora_termino_empalmado  = start;
        }

        //  SE VERIFICA SI EL HORARIO FINAL EXCEDE EL HORARIO DE ATENCION
        let info_ultimo_row = $(modal_clone).find(".agenda-time:last").text();

        //  EXCEDE EL HORARIO DE ATENCION
        let excede_horario  = false;
        if (convertirHoraATiempo(sumarUnMinuto(hora_termino_empalmado,duracion)) >= convertirHoraATiempo(info_ultimo_row)){
            excede_horario  = true;
        }

        console.log('flag_empalmados fin',flag_empalmados);
        console.log('hora_termino_empalmado fin',hora_termino_empalmado);
        return {
            flag_empalmados : flag_empalmados,
            hora_termino_empalmado  : hora_termino_empalmado,
            excede_horario          : excede_horario
        };
    }

    function show_modal_citas(id_agenda_cita = null,hora_default = null,info_profesional,id_profesional){
        let modal_clone = $("#modal_save_class").clone().show();
        let min_hora_inicio_modal   = '';
        let max_hora_inicio_modal   = '';
        let id_template_cita        = '';  
        let tmp_fecha_actual        = fechaActual;

        //  CITAS POR DIA
        let tmp_citas_desglosadas       = citas_desglosadas.map(obj => ({ ...obj }));

        if (id_agenda_cita != null){
            $(modal_clone).find('#select_paciente_modal').removeAttr('required');
        }
        
        $(modal_clone).on('click','#input_modify_day',function(){
            let is_checked  = $(this).prop('checked');

            if (is_checked){
                $(modal_clone).find('.div_cambiar_dia').show();
            } else {
                $(modal_clone).find('.div_cambiar_dia').hide();
                //  SE REHACE LA INFORMACION DEL DIV DE FECHA
                // Tu código aquí
                fechaActual = tmp_fecha_actual;

                //  CITAS POR DIA
                citas_desglosadas   = tmp_citas_desglosadas.map(obj => ({ ...obj }));

                //  SE BORRAN LOS DIV FLOTANTES
                $(modal_clone).find('.evento-flotante').remove();
                
                horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'no_disponible',null,true));
                citas_desglosadas.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'flot_cita',null));
                show_horario_no_disponible_profesional($(modal_clone));
                setTimeout(function(){
                    cambiarDia(null, fechaActual,$(modal_clone));
                    $(modal_clone).find('.input_hora_inicio').val($(modal_clone).find('.input_hora_inicio').data('hora'))
                    calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                },50);
            }
        });

        //  EVENTOS DIV DE DIAS
        // Eventos para los botones de navegación
        $(modal_clone).find("#btn-anterior").on("click", function(){
            cambiarDia(-1,null,$(modal_clone));
            console.log('entre funciones');
            setTimeout(calcula_totales(modal_clone,id_profesional,id_agenda_cita),50);
        });
        $(modal_clone).find("#btn-siguiente").on("click", function(){
            cambiarDia(1,null,$(modal_clone));
            console.log('entre funciones');
            setTimeout(calcula_totales(modal_clone,id_profesional,id_agenda_cita),50);
        });

        $(modal_clone).find("#btn-hoy").on('click',function(){
            // Tu código aquí
            fechaActual = tmp_fecha_actual;

            //  CITAS POR DIA
            citas_desglosadas   = tmp_citas_desglosadas.map(obj => ({ ...obj }));

            //  SE BORRAN LOS DIV FLOTANTES
            $(modal_clone).find('.evento-flotante').remove();
            
            horario_no_disponible.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'no_disponible',null,true));
            citas_desglosadas.forEach(rango => cuadroFlotantesDiario($(modal_clone),rango,background_tipo_cita(rango),'flot_cita',null));
            show_horario_no_disponible_profesional($(modal_clone));
            setTimeout(function(){
                cambiarDia(null, fechaActual,$(modal_clone));
                $(modal_clone).find('.input_hora_inicio').val($(modal_clone).find('.input_hora_inicio').data('hora'))
                calcula_totales(modal_clone,id_profesional,id_agenda_cita);
            },50);
        });

        // Eventos para cambiar semana
        $(modal_clone).find("#btn-semana-anterior").on("click", () => cambiarSemana(-1,$(modal_clone)));
        $(modal_clone).find("#btn-semana-siguiente").on("click", () => cambiarSemana(1,$(modal_clone)));


        $(modal_clone).on('click','.btn_add_service',function(){
            let div_clone   = $("#template_servicio").clone().removeAttr('id').addClass('header_servicio').show();

            //codigo de prueba
            $(div_clone).find('.select_servicios_modal').find('option').remove();
            $(div_clone).find('.select_servicios_modal').append('<option></option>');
            for(let i in info_profesional['servicios']){
                let service = info_profesional['servicios'][i];

                let option  = '<option value="'+service["id_servicio"]+'" data-duracionminutos="'+service['duracion_minutos'] +'" data-duracion="'+service['duracion'] +'" data-costo="'+service['costo'] +'">'+service["nombre"]+'</option>'
                $(div_clone).find('.select_servicios_modal').append(option);

            }

            $(div_clone).find('.select_servicios_modal').select2({
                placeholder: 'Seleccione una opción',
                dropdownParent: $(modal_clone),
                width: '50px'
            }).on('select2:select',function(){
                let duracion    = $(this).find('option:selected').data('duracionminutos');
                let costo       = $(this).find('option:selected').data('costo');

                $(this).closest('.header_servicio').find('.duracion').val(duracion);
                $(this).closest('.header_servicio').find('.costo').text(costo);

                calcula_totales(modal_clone,id_profesional,id_agenda_cita);
            });

            $(modal_clone).find('.div_header_servicios').append(div_clone);
        });

        $(modal_clone).on('mouseenter','.evento-flotante',function() {
            $(modal_clone).find('.agenda-hours').addClass('no-hover-effect');
        });

        $(modal_clone).on('mouseleave','.evento-flotante', function() {
            $(modal_clone).find('.agenda-hours').removeClass('no-hover-effect');
        });

        $(modal_clone).on('click','.btn_delete_servicio',function(){
            $(this).closest('.header_servicio').remove();
            calcula_totales(modal_clone,id_profesional,id_agenda_cita);
        });

        let cadena_enviada  = '';
        $(modal_clone).find('#select_paciente_modal').select2({
            placeholder: 'Seleccione una opción',
            dropdownParent: $(modal_clone),
            width: '50px',
            minimumInputLength: 5,
            ajax: {
                url: url_index,
                method: 'post',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    cadena_enviada  = params.term;
                    return {
                        accion: 'fill_combo',
                        cadena: params.term
                    };
                },
                processResults: function (data) {
                    // Aquí adaptamos la respuesta al formato que select2 necesita
                    return {
                        results: data.map(function (item) {
                            return {
                                id: item.id,
                                text: item.celular + ' - ' + item.nombre_completo,
                                nombre: item.nombre,
                                primer_apellido: item.primer_apellido,
                                segundo_apellido: item.segundo_apellido,
                                celular: item.celular
                            };
                        })
                    };
                },
                cache: true
            }
        }).on('select2:select', function (e) {
            // Acción al seleccionar una opción
            let data            = e.params.data;
            let input_disabled  = true;
            //  SI ES -1 SIGNIFICA QUE QUIERE AGREGAR UN NUEVO REGISTRO
            if (data.id == -1){
                input_disabled  = false;
                if(!isNaN(cadena_enviada)){
                    data.celular    = cadena_enviada;
                }
            }

            $(modal_clone).find('.div_datos_paciente').find('#input_celular').val(data.celular);
            $(modal_clone).find('.div_datos_paciente').find('#input_nombre').val(data.nombre);
            $(modal_clone).find('.div_datos_paciente').find('#input_primer_apellido').val(data.primer_apellido);
            $(modal_clone).find('.div_datos_paciente').find('#input_segundo_apellido').val(data.segundo_apellido);
            $(modal_clone).find('.div_datos_paciente').show().find('input').prop('disabled',input_disabled);

            if ($(modal_clone).find('.select_servicios_modal').val() != null && $(modal_clone).find('.select_servicios_modal').val() != ''){
                calcula_totales(modal_clone,id_profesional,id_agenda_cita);
            }
            
        });

        $(modal_clone).on('click','#btn_add_appoitment',function(){
            count_id_citas  ++;

            let row_cita    = $("#template_cita").clone().removeClass('hide').attr('id','id_horario_cita_'+count_id_citas);
            $(row_cita).find('.span_duracion').text($(modal_clone).find('#select_servicios_modal').find('option:selected').data('duracionminutos')+' Min.');

            $(row_cita).find('.select_dias').select2({
                placeholder: 'Seleccione una opción',
                dropdownParent: $(modal_clone),
                width: '50px'
            });

            $(modal_clone).find('.div_header_citas').append(row_cita);
        });

        $(modal_clone).on('blur', '.input_hora_inicio', function() {
            //@TODO OBTENER LA HORA INICIO ANTERIOR EN CASO DE EXISTIR EMPALMADOS
            const valor = $(this).val(); // Obtener el valor del input
            const patron = /^([01]\d|2[0-3]):([0-5]\d)$/; // Expresión regular para validar HH:MM

            // Validar el formato de la hora
            let input_termino_val   = $(modal_clone).find('.input_hora_termino').val();
            if (patron.test(valor)) {
                //  SE BUSCA QUE EXISTA AL MENOS UN VALOR DE SERVICIO ELEGIDO
                let flag_servicio   = false;
                $(modal_clone).find('.header_servicio').each(function(){
                    if ($(this).find('.select_servicios_modal').val() != null && $(this).find('.select_servicios_modal').val() != ''){
                        flag_servicio   = true;
                        return false;
                    }
                });
                // Ejecutar la función solo si el formato es correcto
                if (flag_servicio){
                    calcula_totales(modal_clone,id_profesional,id_agenda_cita);
                }
            }
        });

        $(modal_clone).on('blur', '.duracion', function() {
            calcula_totales(modal_clone,id_profesional,id_agenda_cita);
        });

        $(modal_clone).on('blur', '.input_nombres', function() {
            if ($(modal_clone).find('.input_hora_termino').val() != null && $(modal_clone).find('.input_hora_termino').val() != ''){
                calcula_totales(modal_clone,id_profesional,id_agenda_cita);
            }
        });

        //  GUARDAR CITA
        $(modal_clone).on('click','#btnSave',function(){
            let btn = $(this);
            $(btn).prop('disabled',true);
            const form = $(modal_clone).find('#form_modal_create')[0]; // Obtén el elemento DOM
            let flag_error  = false;
            
            if (!form.checkValidity()) {
                $(form).addClass('was-validated');
                flag_error = true;
            } else {
                $(form).removeClass('was-validated');
            }

            if (flag_error){
                $(btn).prop('disabled',false);
                return false;
            }

            //  VALIDAR ESTRUCTURA DE DATOS
            if (parseInt($(modal_clone).find('#input_celular').val().length) != parseInt(10)){
                $(modal_clone).find('#alert_error').find('#msg_error').html(error_list['error_celular']);
                $(modal_clone).find('#alert_error').addClass('d-flex').show();
                $(btn).prop('disabled',false);
                return false;
            } else {
                $(modal_clone).find('#alert_error').removeClass('d-flex').hide();
            }

            //  SE VALIDA QUE NO EXISTAN HORAS EMPALMADAS
            let flag_empalmados = false;
            let dia_empalmado   = '';
            $(modal_clone).find('.evento-flotante').each(function(){
                const id_header         = $(this).data('idagendacita');
                let hora_inicio_header  = convertirHoraATiempo($(this).data('horainicio'));
                let hora_termino_header = convertirHoraATiempo($(this).data('horatermino'));

                $(modal_clone).find('.evento-flotante').each(function(){
                    //  NO SE VERIFICA EL EMPALMADO SI ES EL MISMO ID O SI ES DIFERENTE DIA
                    if (id_header == $(this).data('idagendacita')){
                        return true;
                    }

                    let hora_inicio     = convertirHoraATiempo($(this).data('horainicio'));
                    let hora_termino    = convertirHoraATiempo($(this).data('horatermino'));

                    //  SE VERIFICA QUE NO EXISTA EMPALADO DE LA HORA INICIAL
                    if (hora_inicio_header >= hora_inicio && hora_inicio_header < hora_termino){
                        console.log('empalmado 1',(hora_inicio_header >= hora_inicio),hora_inicio_header < hora_termino);
                        flag_empalmados = true;
                        return false;
                    }

                    //  SE VERIFICA EL EMPALMADO CON LA HORA DE TERMINO
                    if (hora_termino_header > hora_inicio && hora_termino_header <= hora_termino){
                        console.log('empalmado 2',(hora_termino_header > hora_inicio),(hora_termino_header <= hora_termino));
                        flag_empalmados = true;
                        return false;
                    }

                    if (flag_empalmados){
                        return false;
                    }
                });
            });

            if (flag_empalmados){
                $(btn).prop('disabled',false);
                $(modal_clone).find('#alert_error').find('#msg_error').html(error_list['error_day_spliced']);
                $(modal_clone).find('#alert_error').addClass('d-flex').show();
                return false;
            } else {
                $(modal_clone).find('#alert_error').removeClass('d-flex').hide();
            }
            console.log('valido save');
            //return false;

            let obj_info        = {
                id_agenda_cita      : id_agenda_cita,
                id_paciente         : null,
                celular             : null,
                primer_apellido     : null,
                segundo_apellido    : null,
                nombre              : null,
                servicios           : [],
                accion              : null
            };
            
            $(modal_clone).find('.header_servicio').each(function(){
                obj_info.servicios.push({
                    id_servicio : $(this).find('.select_servicios_modal').val(),
                    duracion    : $(this).find('.duracion').val(),
                    costo       : $(this).find('.costo').text(),
                });
            });

            if (id_agenda_cita == null){
                obj_info['accion']  = 'crear_cita';
                if ($(modal_clone).find('#select_paciente_modal').val() == -1){
                    obj_info.celular          = $(modal_clone).find('#input_celular').val();
                    obj_info.primer_apellido  = $(modal_clone).find('#input_primer_apellido').val();
                    obj_info.segundo_apellido = $(modal_clone).find('#input_segundo_apellido').val();
                    obj_info.nombre           = $(modal_clone).find('#input_nombre').val();
                } else {
                    obj_info.id_paciente    = $(modal_clone).find('#select_paciente_modal').val();
                }
            } else {
                obj_info['accion']  = $(modal_clone).find('#input_modify_day').prop('checked') ? 'reagendar_cita' : 'modificar_cita';
            }
            

            obj_info.id_profesional = id_profesional;
            obj_info.id_locacion    = $("#select_locaciones").val();
            
            //  OBTENER FECHA DE LA CITA
            let fecha_actual    = formatearFecha(fechaActual);
            fecha_actual        = fecha_actual.split(",");
            obj_info.fecha_cita = fecha_actual[1].trim();
            obj_info.dia        = diasSemana.indexOf(fecha_actual[0]) + 1;
            obj_info.hora_inicio    = $(modal_clone).find('.input_hora_inicio').val();
            obj_info.hora_termino   = $(modal_clone).find('.input_hora_termino').val();

            console.log('obj_info');
            console.log(obj_info);
            //return false;

            $.ajax({
                url         : url_index,
                method      : 'post',
                data        : {
                    obj_info    : obj_info,
                    accion      : 'save_appoinment'
                },
                success : function(data){
                    // Tu código aquí
                    fechaActual = tmp_fecha_actual;

                    //  CITAS POR DIA
                    citas_desglosadas       = tmp_citas_desglosadas.map(obj => ({ ...obj }));
                    $(btn).prop('disabled',false);
                    $(modal_clone).modal('hide');
                    showAlert('success',data);
                    get_all_appointments($(".filters"));
                },
                error : function(error){
                    $(btn).prop('disabled',false);
                    console.log('error');
                    //console.log(error);
                    actionJsonError(error,btn);
                }
            });
        });

        let profesional = profesionales.find(row => row.id == id_profesional);
        console.log('profesional a editare',profesional);
        show_hours(modal_clone,modal_clone,min_hora_inicio,max_hora_inicio,[profesional],info_profesional['rango_no_disponible']);
        console.log('num flot_cita',$(modal_clone).find('.flot_cita').length);

        if (id_agenda_cita == null){
            let hora_inicio = verificarHoraInicio(modal_clone,hora_default,sumarUnMinuto(hora_default,5),id_agenda_cita,5);
            
            $(modal_clone).find('.input_hora_inicio').val(hora_inicio['hora_termino_empalmado']);
        } else {
            let info_cita   = citas_desglosadas.find(row => row.id_agenda_cita == id_agenda_cita);
            $(modal_clone).find('.input_hora_inicio').val(info_cita.start).data('hora',info_cita.start);
            $(modal_clone).find('.input_hora_termino').val(info_cita.end);

            //  SE CREAN LOS SERVICIOS
            console.log('info_cita',info_cita);
            for(let i in info_cita['servicios']){
                let servicio = info_cita['servicios'][i];

                $(modal_clone).find('.btn_add_service').trigger('click');
                $(modal_clone).find('.header_servicio').each(function(){
                    if ($(this).find('.select_servicios_modal').val() != '' && $(this).find('.select_servicios_modal').val() != null){
                        return true;
                    }

                    $(this).find('.select_servicios_modal').val(servicio['id_servicio']).trigger('change');
                    $(this).find('.duracion').val(servicio['duracion']);
                    $(this).find('.costo').text(servicio['costo']);
                    return false;
                });

            }

            $(modal_clone).find('.div_select_paciente').hide();
            $(modal_clone).find('.div_datos_paciente').show();
            $(modal_clone).find('#span_paciente').text(info_cita['celular'] + ' - ' + info_cita['primer_apellido'] + ' ' + info_cita['segundo_apellido']+ ' '+ info_cita['nombre'] );
            $(modal_clone).find('#span_paciente').data('idagendacita',id_agenda_cita);
            $(modal_clone).find('#span_paciente').data('idprofesional',id_profesional);
            let formato_fecha   = info_cita['fecha_cita'].split('-');

            $(modal_clone).find('#span_fecha_cita').text(formato_fecha[2]+'/'+formato_fecha[1]+'/'+formato_fecha[0]);
            $(modal_clone).find('#fecha-actual').text(formatearFecha(new Date(formato_fecha[0],formato_fecha[1] - 1,formato_fecha[2])));
            fechaActual = new Date(formato_fecha[0],formato_fecha[1] - 1,formato_fecha[2]);
            


            $(modal_clone).find('.div_input_paciente').hide();
            $(modal_clone).find('.div_text_paciente').show();
            $(modal_clone).find('#input_celular').val(info_cita['celular']).prop('disabled',true);
            $(modal_clone).find('#input_primer_apellido').val(info_cita['primer_apellido']).prop('disabled',true);
            $(modal_clone).find('#input_segundo_apellido').val(info_cita['segundo_apellido']).prop('disabled',true);
            $(modal_clone).find('#input_nombre').val(info_cita['nombre']).prop('disabled',true);

            calcula_totales(modal_clone,id_profesional,id_agenda_cita);

            $(modal_clone).on('hidden.bs.modal', function (e) {
                // Tu código aquí
                fechaActual = tmp_fecha_actual;

                //  CITAS POR DIA
                citas_desglosadas       = tmp_citas_desglosadas.map(obj => ({ ...obj }));
            });

        }

        if ($(modal_clone).find('.header_servicio').length == 0){
            $(modal_clone).find('.btn_add_service').trigger('click');
        }

        $(modal_clone).on('click','.agenda-hours',function(){
            if ($(this).hasClass('no-hover-effect')){
                return false;
            }
            let hora_inicio     = $(this).closest('.row_info').find('.agenda-time').text();
            let duracion    = $(modal_clone).find("#total_duracion").text();

            duracion        = duracion == 0 || duracion == '' || duracion == null ? 5 : duracion;
            hora_inicio = verificarHoraInicio(modal_clone,hora_inicio,sumarUnMinuto(hora_inicio,duracion),id_agenda_cita,duracion);

            if (hora_inicio['excede_horario']){
                hora_inicio['hora_termino_empalmado']   = $(modal_clone).find('.input_hora_inicio').val();
            }
            $(modal_clone).find('.input_hora_inicio').val(hora_inicio['hora_termino_empalmado']);

            if ($(modal_clone).find('.select_servicios_modal').val() != null && $(modal_clone).find('.select_servicios_modal').val() != ''){
                calcula_totales(modal_clone,id_profesional,id_agenda_cita);
            }
            
        });

        $(modal_clone).find('.hide').removeClass('hide');
        $(modal_clone).find('.hide_container').removeClass('hide_container');
        $(modal_clone).modal('show');
    }

    function ubicar_citas_dia(element,div_header){
        let fechaStr = $(element).data('day');
        let partes = fechaStr.split('-');
        let nuevaFecha = new Date(parseInt(partes[0]), parseInt(partes[1]) - 1, parseInt(partes[2]));
        
        let valida_fechas   = validar_fechas_apertura_agenda(nuevaFecha);
        if (valida_fechas != true){
            showAlert('danger',valida_fechas);
            return false;
        }
        console.log('1',div_header);
        cambiarDia(null, nuevaFecha,$(div_header));
        console.log('2');
        $('.div_principal_filter').find("#btn-dia").trigger('click');
    }

    //  VALIDA 
    function validar_fechas_apertura_agenda(nueva_fecha){
        try{
            //  VALIDA SI EXISTE AL MENOS UN REGISTRO DE APERTURA DE AGENDA
            if (exist_apertura_agenda == 0){
                throw new Error("No existe un registro de apertura de agenda");
            } 

            if (nueva_fecha > cierre_agenda) {
                throw new Error("No puedes seleccionar una fecha posterior al cierre de la agenda.");
            }

        }catch(err){
            return err;
        }

        return true;
    }

    //  AJAX PARA OBTENER TODA LA INFOMACION DE LAS CITAS
    function ajax_previo_show_modal(element){
        let valida_fechas   = validar_fechas_apertura_agenda(fechaActual);
        if (valida_fechas != true){
            showAlert('danger',valida_fechas);
            return false;
        }

        let fecha_actual    = formatearFecha(fechaActual);
        fecha_actual        = fecha_actual.split(",");
        let hora_inicio     = $(element).closest('.row_info').find('.agenda-time').text();

        if ($(element).hasClass('no-hover-effect')){
            return false;
        }

        let anio    = fechaActual.getFullYear();
        let mes     = String(fechaActual.getMonth() + 1).padStart(2, '0'); // Los meses van de 0 a 11
        let dia     = String(fechaActual.getDate()).padStart(2, '0');

        // Formatear la fecha como 'YYYY-MM-DD'
        let fechaFormateada = `${anio}-${mes}-${dia}`;
        const id_profesional    = $(element).data('idprofesional');
        const id_agenda_cita    = typeof $(element).data('idagendacita') != "undefined" ? $(element).data('idagendacita') : null;
        let profesional = profesionales.find(row => row.id == id_profesional);
        console.log('id_agenda_cita',id_agenda_cita);
        console.log('id_profesional',id_profesional);
        console.log('profesional',profesional);
        let obj_data    = {
            citas_paciente      : {},
            citas_programadas   : {},
            rango_no_disponible : profesional['rango_no_disponible'],
            servicios           : profesional['servicios']
        };

        show_modal_citas(id_agenda_cita,hora_inicio,obj_data,id_profesional);
        // return false;
        // $.ajax({
        //     url     : url_index,
        //     method  : 'post',
        //     data    : {
        //         accion  : 'get_horario_profesional',
        //         id_locacion     : $("#select_locaciones").val(),
        //         id_profesional  : id_profesional,
        //         min_hora_inicio : min_hora_inicio,
        //         max_hora_inicio : max_hora_inicio,
        //         fecha_programar : fechaFormateada
        //     },
        //     success : function(data){

        //         console.log('data preview ajax');
        //         console.log(data);
        //         show_modal_citas(id_agenda_cita,hora_inicio,data,id_profesional);
        //     },
        //     error : function(error){
        //         console.log('error');
        //         console.log(error);
        //         // $(modal_clone).find('.flot_profesional').remove();
        //         // $(modal_clone).find('#select_profesionales_modal').val(null).trigger('change');

        //         // clear_week_container(modal_clone,false);

        //         showAlert('danger','Profesional sin horario de atenci&oacute;n asignado');
        //     }
        // });
    }

    // Inicializar la agenda
    $(document).ready(function () {

        //  CONVERTIR LOS COMBOS EN SELECT2
        //selectToSelect2($(".div_header_filters"),"select_locaciones");
        selectToSelect2($(".div_principal_filter"),"select_servicios");
        selectToSelect2($(".div_principal_filter"),"select_profesionales");
        //selectToSelect2($(".div_header_filters"),"select_pacientes");

        $('.div_principal_filter').find('#select_pacientes').select2({
            placeholder: 'Seleccione una opción',
            width: '50px',
            minimumInputLength: 5,
            allowClear : true,
            ajax: {
                url: url_index,
                method: 'post',
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    cadena_enviada  = params.term;
                    return {
                        accion: 'fill_combo',
                        cadena: params.term
                    };
                },
                processResults: function (data) {
                    // Aquí adaptamos la respuesta al formato que select2 necesita
                    return {
                        results: data.map(function (item) {
                            if (item.id == -1) return true;
                            return {
                                id: item.id,
                                text: item.celular + ' - ' + item.nombre_completo,
                                nombre: item.nombre,
                                primer_apellido: item.primer_apellido,
                                segundo_apellido: item.segundo_apellido,
                                celular: item.celular
                            };
                        })
                    };
                },
                cache: true
            }
        });

        //  EVENTOS PARA FILTRAR CITAS
        $(".filters").find('#select_locaciones').select2({
            placeholder: 'Seleccione una opción',
            allowClear : false,
            width: '50px'
        }).on('select2:select',function(){
            
            if ($(this).val() != null){
                get_all_appointments($('.filters'),null,true);
            }
        });

        $(".filters").on('select2:select','.select_filtros',function(){
            let obj_citas_unificadas        = unificarCitasAgendadas(citas_desglosadas);
            let filtro_citas_desglosadas    = [];

            //  SE BORRAN TODOS LOS REGISTROS DE CITAS
            $("#div_header_agenda").find('.flot_cita').remove();
            const $weekContainer = $(".div_header_week_container .week-container");
            obj_citas_unificadas.forEach(evento => cuadroFlotantesSemana(evento,background_tipo_cita(evento),$weekContainer,'flot_cita'));
            citas_desglosadas.forEach(rango => cuadroFlotantesDiario($("#div_header_agenda"),rango,background_tipo_cita(rango),'flot_cita',null));
        }).on("select2:unselect",'.select_filtros',function(){
            let obj_citas_unificadas    = unificarCitasAgendadas(citas_desglosadas);

            //  SE BORRAN TODOS LOS REGISTROS DE CITAS
            $("#div_header_agenda").find('.flot_cita').remove();
            const $weekContainer = $(".div_header_week_container .week-container");
            obj_citas_unificadas.forEach(evento => cuadroFlotantesSemana(evento,background_tipo_cita(evento),$weekContainer,'flot_cita'));
            citas_desglosadas.forEach(rango => cuadroFlotantesDiario($("#div_header_agenda"),rango,background_tipo_cita(rango),'flot_cita',null));
        });

        if ($("#select_locaciones").val() != null && $("#select_locaciones").val() != ''){
            get_all_appointments($(".filters"),null,true);
        }

        // Encapsulación de eventos dentro de .div_header_days_container
        $('.div_header_days_container').on('mouseenter','.evento-flotante',function() {
            $('.agenda-hours').addClass('no-hover-effect');
        });

        $('.div_header_days_container').on('mouseleave','.evento-flotante', function() {
            $('.agenda-hours').removeClass('no-hover-effect');
        });

        const divHeaderFilters = $(".div_principal_filter");

        // Eventos para los botones de navegación
        divHeaderFilters.find("#btn-anterior").on("click", () => cambiarDia(-1,null,$("#div_header_agenda")));
        divHeaderFilters.find("#btn-siguiente").on("click", () => cambiarDia(1,null,$("#div_header_agenda")));

        // Eventos para cambiar semana
        divHeaderFilters.find("#btn-semana-anterior").on("click", () => cambiarSemana(-1,$("#div_header_agenda")));
        divHeaderFilters.find("#btn-semana-siguiente").on("click", () => cambiarSemana(1,$("#div_header_agenda")));

        // Eventos para cambiar mes
        divHeaderFilters.find("#btn-mes-anterior").on("click", () => cambiarMes(-1));
        divHeaderFilters.find("#btn-mes-siguiente").on("click", () => cambiarMes(1));

        // Evento para volver al día actual
        divHeaderFilters.find("#btn-hoy").on("click", () => irAFechaActual());

        // Eventos para los botones de vista (Mes, Semana, Día)
        divHeaderFilters.find("#btn-mes").on("click", () => {
            $(".container-calendar").addClass('hide_container');
            $(".div_header_month_container").removeClass('hide_container');
        });
        divHeaderFilters.find("#btn-semana").on("click", () => {
            //alert("Cambiar a vista de Semana");
            // Aquí puedes implementar la lógica para cambiar a la vista de semana
            $(".container-calendar").addClass('hide_container');
            $(".div_header_week_container").removeClass('hide_container');

        });
        divHeaderFilters.find("#btn-dia").on("click", () => {
            //alert("Cambiar a vista de Día");
            // Aquí puedes implementar la lógica para cambiar a la vista de día
            $(".container-calendar").addClass('hide_container');
            $(".div_header_days_container").removeClass('hide_container');
        });

        // Eventos para los select de Servicios y Pacientes
        divHeaderFilters.find("#select-servicios").on("change", function () {
            const servicioSeleccionado = $(this).val();
            // Aquí puedes implementar la lógica para filtrar por servicio
        });

        divHeaderFilters.find("#select-pacientes").on("change", function () {
            const pacienteSeleccionado = $(this).val();
            // Aquí puedes implementar la lógica para filtrar por paciente
        });

        actualizarFecha(divHeaderFilters); // Mostrar la fecha actual al cargar la página

        //const horas = ["15:00", "16:00", "17:00", "18:00", "19:00"];
        const $weekContainer = $(".div_header_week_container .week-container");

        $(".div_header_month_container #prevMonth").on("click", function() {
            fechaActual.setMonth(fechaActual.getMonth() - 1);
            renderCalendarMes();
        });

        $(".div_header_month_container #nextMonth").on("click", function() {
            fechaActual.setMonth(fechaActual.getMonth() + 1);
            renderCalendarMes();
        });

        $(".div_header_month_container").on('click', '.div_month_day', function () {
            ubicar_citas_dia($(this),$("#div_header_agenda"));
        });

        $("#div_header_week_container").on('click', '.grid-hours', function () {
            ubicar_citas_dia($(this),$("#div_header_agenda"));
        });


        renderCalendarMes();

        //  EVENTOS PARA APERTURA DE AGENDA
        $("#btn_agenda_opening").on('click',function(){
            let modal_clone = $("#modal_agenda_opening").clone().show();

            // Aplica select2 solo al nuevo select
            $(modal_clone).find('.select_locaciones_modal').select2({
                placeholder : 'Seleccione una opción',
                allowClear  : false,
                dropdownParent: $(modal_clone),
                width: '50px'
            }).on('select2:select',function(){
                const id_locacion   = $(this).val();
                $.ajax({
                    url     : url_index,
                    method  : 'post',
                    data    : {
                        accion      : 'get_date',
                        id_locacion : id_locacion
                    },
                    success     : function(data){
                        console.log('data');
                        console.log(data);

                        $(modal_clone).find('#input_fecha_inicio').prop('disabled',false).attr('min' , data['fecha_actual']).val(data['last_fecha_limite']).trigger('change');
                        $(modal_clone).find('#input_fecha_termino').attr('min' , data['fecha_actual']).prop('disabled',false);
                    },
                    error       : function(error){
                        actionJsonError(error,btn);
                    }
                })
            });

            if ($(modal_clone).find('.select_locaciones_modal').val() != '' && $(modal_clone).find('.select_locaciones_modal') != null){
                const id_locacion   = $(modal_clone).find('.select_locaciones_modal').val();
                $.ajax({
                    url     : url_index,
                    method  : 'post',
                    data    : {
                        accion      : 'get_date',
                        id_locacion : id_locacion
                    },
                    success     : function(data){
                        console.log('data');
                        console.log(data);

                        $(modal_clone).find('#input_fecha_inicio').prop('disabled',false).attr('min' , data['fecha_actual']).val(data['last_fecha_limite']).trigger('change');
                        $(modal_clone).find('#input_fecha_termino').attr('min' , data['fecha_actual']).prop('disabled',false);
                    },
                    error       : function(error){
                        actionJsonError(error,btn);
                    }
                })
            }

            $(modal_clone).on('change','#input_fecha_inicio',function(){
                // Cadena de texto con la fecha en formato DD/MM/YYYY
                const fechaStr = $(this).val();

                // Dividir la cadena en día, mes y año
                const [anio, mes, dia] = fechaStr.split('-');

                // Crear un objeto Date (los meses en JavaScript son base 0, por eso restamos 1 al mes)
                const fecha = new Date(anio, mes - 1, dia);

                // Sumar 31 días
                fecha.setDate(fecha.getDate() + parseInt(dias_programacion_citas));
                let [nuevo_dia, nuevo_mes, nuevo_anio]  = fecha.toLocaleDateString().split('/');
                nuevo_mes   = nuevo_mes.length == 1 ? '0'+nuevo_mes : nuevo_mes;
                nuevo_dia   = nuevo_dia.length == 1 ? '0'+nuevo_dia : nuevo_dia;


                // Mostrar la nueva fecha en formato local
                $(modal_clone).find('#input_fecha_termino').val(nuevo_anio+'-'+nuevo_mes+'-'+nuevo_dia);
            });

            $(modal_clone).on('click','#btnSave',function(){
                let btn =  $(this);
                $(btn).prop('disable',true);

                const form = $(modal_clone).find('#form_modal_agenda_opening')[0]; // Obtén el elemento DOM
                let flag_error  = false;
                if (form.checkValidity() === false) {
                    $(form).addClass('was-validated');
                    flag_error  = true;
                } else {
                    $(form).removeClass('was-validated');
                }

                let fecha_inicio    = $(modal_clone).find('#input_fecha_inicio').val();
                let fecha_termino   = $(modal_clone).find('#input_fecha_termino').val();

                // Convertir las cadenas a objetos Date
                fecha_inicio    = new Date(fecha_inicio);
                fecha_termino   = new Date(fecha_termino);

                //  VALIDAR REGISTROS
                if (fecha_inicio > fecha_termino){
                    $(modal_clone).find('#alert_error').find('#msg_error').html(error_list['error_range_date']);
                    $(modal_clone).find('#alert_error').addClass('d-flex').show();
                    return false;
                }

                if(flag_error){
                    return false;
                }

                let obj_info    = {
                    id_locacion     : $(modal_clone).find('#select_locaciones_modal').val(),
                    nombre_locacion : $(modal_clone).find('#select_locaciones_modal').find('option:selected').text(),
                    fecha_inicio    : $(modal_clone).find('#input_fecha_inicio').val(),
                    fecha_termino   : $(modal_clone).find('#input_fecha_termino').val(),
                };

                console.log('obj_info');
                console.log(obj_info);
                //return false;

                //  AJAX SAVE
                $.ajax({
                    url         : url_index,
                    method      : 'POST',
                    dataType    : 'json',
                    data        : {
                        accion      : 'save_agenda_opening',
                        obj_info    : obj_info
                    },
                    success     : function(data){
                        $(btn).prop('disabled',false);
                        $(modal_clone).modal('hide');
                        showAlert('success',data);
                        get_all_appointments($(".filters"));
                    },
                    error     : function(error){
                        actionJsonError(error,btn);
                    }
                })
            });

            $(modal_clone).modal('show');
        });

        //  EVENTO PARA AGENDAR UNA CITA NUEVA
        $("#agenda-container").on('click','.agenda-hours',function(event){
            if ($(event.target).closest('.flot_cita').length > 0) {
                return; // no ejecutar si el clic vino desde un flot_cita
            }

            ajax_previo_show_modal($(this));
        });

        const $floatingBox  = $(".flot_cita");
        const $infoBox      = $("#infoBox");
        const $closeModal   = $("#closeModal");
        // Mostrar el modal al pasar el mouse sobre el .flot_cita
        $("#div_header_week_container").on("click",'.flot_cita',function () {
            //show_info_cita($(this));
            let div_flot_cita   = $(this);
            let dia_cita        = $(this).data('day');
            let modal_clone     = $("#modal_info_citas").clone().removeAttr('id').show();
            dia_cita            = dia_cita.split('-');
            dia_cita            = new Date(dia_cita[0],dia_cita[1] - 1,dia_cita[2]);
            //  SE PINTA EL DIA EN EL MODAL
            $(modal_clone).find('#dia_cita').text(formatearFecha(dia_cita));

            //  EVENTO PARA IR AL DIA 
            $(modal_clone).on('click','#btn_go_day',function(){
                //ajax_previo_show_modal($(div_flot_cita));
                ubicar_citas_dia($(div_flot_cita),$("#div_header_agenda"));
            });

            let lista_id_agenda_citas   = JSON.parse($(this).attr('data-listaidagendacitas'));

            //  SE RECORRE LA LISTA DE CITAS AGENDADAS, AHI SE PINTA LA INFOMACION UN MODAL
            let id_row  = 0;
            for(let i in citas_desglosadas){
                id_row  ++;
                let cita    = citas_desglosadas[i];
                if (lista_id_agenda_citas.includes(cita['id_agenda_cita'])){
                    console.log('Cita array',cita);
                    let row = $("#template_cita_dia").clone().removeAttr('id').show();

                    $(row).find('.nombre_paciente').text(cita['nombre_completo']);
                    $(row).find('.nombre_profesional').text(cita['nombre_profesional']);
                    $(row).find('.horario_cita').text(cita['start'] +' - '+cita['end']);

                    $(row).find('.div_header').attr('data-bs-target', '#collapse'+id_row);
                    $(row).find('.collapse').attr('id','collapse'+id_row);

                    //  SE RECORREN LOS SERVICIOS
                    for(let x in cita['servicios']){
                        let servicio    = cita['servicios'][x];
                        let row_servicio    = $("#template_servicio_cita_diaria").clone().removeAttr('id').addClass('d-flex').removeClass('hide');

                        $(row_servicio).find('.servicio').text(servicio['nombre_servicio']);
                        $(row_servicio).find('.duracion').text(servicio['duracion']);
                        $(row_servicio).find('.costo').text(servicio['costo']);

                        $(row).find('.div_header_servicios').append(row_servicio);
                    }

                    $(row).find('.total').text(cita['total']);
                    $(modal_clone).find('#accordion').append(row);
                }
            }

            $(modal_clone).modal('show');

        });

        $(".div_header_days_container").on("click",'.flot_cita',function () {
            event.stopPropagation(); // Esto evita que el clic se propague a los padres como .agenda-hours
            show_info_cita($(this));
        });

        $("#infoBox").on('click','.btn_edit',function(){
            ajax_previo_show_modal($(this));
            $("#closeModal").trigger('click');
        });

        $("#infoBox").on('click','.btn_cancelar',function(){
            show_modal_cancelar_cita($(this));
            $("#closeModal").trigger('click');
        });

        $("#infoBox").on('click','.btn_asistencia',function(){
            show_modal_asistencia($(this));
            $("#closeModal").trigger('click');
        });

        // Ocultar el modal al hacer clic en el botón de cerrar
        $("#closeModal").on("click", function () {
            $infoBox.css("display", "none"); // Ocultar el modal
        });
    });

    function show_info_cita(element){
        let horario = $(element).data('horainicio')+' Hrs. - '+$(element).data('horatermino')+' Hrs.';
        $("#infoBox").find("#profesional").text($(element).data('profesional'));
        $("#infoBox").find("#servicio").text($(element).data('paciente'));
        $("#infoBox").find("#duracion").text($(element).data('duracion')+' Minutos');
        $("#infoBox").find("#dia").text($(element).data('dialabel'));
        $("#infoBox").find("#horario").text(horario);

        if ($(element).data('asistencia') == 1){
            $("#infoBox").find('.btn_asistencia').html('').prop('title','Modificar estatus actual: Asistencia').append('<i class="bi bi-person-check-fill"></i>');
        }  
        
        if ($(element).data('asistencia') == 2){
            $("#infoBox").find('.btn_asistencia').html('').prop('title','Modificar estatus actual: Retardo').append('<i class="bi bi-person-fill-exclamation"></i>');
        }

        if ($(element).data('asistencia') == 0){
            $("#infoBox").find('.btn_asistencia').html('').prop('title','Modificar estatus actual: Falta').append('<i class="bi bi-person-dash-fill"></i>');
        }

        $("#infoBox").find(".icon-button")
            .data('idagendacita',$(element).data('idagendacita'))
            .data('idprofesional',$(element).data('idprofesional'))
            .data('dia',$(element).data('dialabel'))
            .data('asistencia',$(element).data('asistencia'))
            .data('horainicio',$(element).data('horainicio'));
        $("#infoBox").css("display", "block"); // Mostrar el modal

        // CAMBIO PARA HACER MERGE
    }

    function unificarCitasAgendadas(citas) {
        let id_servicio     = $(".filters").find('#select_servicios').val();
        let id_profesional  = $(".filters").find('#select_profesionales').val();
        let id_paciente     = $(".filters").find('#select_pacientes').val();

        id_servicio_filtro      = id_servicio == null || id_servicio == '' ? null : id_servicio;
        id_profesional_filtro   = id_profesional == null || id_profesional == '' ? null : id_profesional;
        id_paciente_filtro      = id_paciente == null || id_paciente == '' ? null : id_paciente;
        // Ordenar citas por fecha y hora de inicio
        citas.sort((a, b) => (a.fecha_cita + a.start).localeCompare(b.fecha_cita + b.start));

        // Agrupar citas por día y fusionar solapamientos
        const citasAgrupadas = {};

        citas.forEach(cita => {
            const { day, fecha_cita, start, end, id_agenda_cita,id_paciente,id_profesional,servicios } = cita;
            //  LIMPIA DE FILTROS
            if (id_profesional_filtro != null && id_profesional_filtro != id_profesional){
                return true;
            }

            if (id_paciente_filtro != null && id_paciente_filtro != id_paciente){
                return true;
            }

            console.log('servicios',servicios,id_servicio_filtro);

            let has_servicio    = false;
            if (id_servicio_filtro != null){
                for(let i in servicios){
                    if (servicios[i]['id_servicio'] == id_servicio_filtro){
                        has_servicio    = true;
                        //return false;
                    }
                }
            } else {
                has_servicio    = true;
            }
            console.log('has_servicio',has_servicio);
            if (!has_servicio){
                return true;
            }

            if (!citasAgrupadas[day]) {
                citasAgrupadas[day] = [{
                    start, end, fecha_cita, day,
                    nombre_completo: 'Horario ocupado',
                    lista_id_agenda_citas: [id_agenda_cita]
                }];
            } else {
                const lastGroup = citasAgrupadas[day][citasAgrupadas[day].length - 1];

                // Convertir las horas en minutos para comparación
                const lastEndMinutes = parseTime(lastGroup.end);
                const currentEndMinutes = parseTime(end);

                // Si `lastEndMinutes` es NaN, asignar `lastGroup.end` como respaldo
                if (isNaN(lastEndMinutes)) {
                    console.warn(`Corregido lastGroup.end (era NaN), asignando valor previo:`, lastGroup.end);
                    lastGroup.end = lastGroup.end;
                }

                if (parseTime(start) <= lastEndMinutes) {
                    // Aquí garantizamos que se use el mayor valor de end correctamente
                    lastGroup.end = lastEndMinutes > currentEndMinutes ? lastGroup.end : end;
                    lastGroup.lista_id_agenda_citas.push(id_agenda_cita);
                } else {
                    citasAgrupadas[day].push({
                        start, end, fecha_cita, day,
                        nombre_completo: 'Horario ocupado',
                        lista_id_agenda_citas: [id_agenda_cita]
                    });
                }
            }
        });

        // Convertir el resultado a un array numerado
        return Object.values(citasAgrupadas).flat();
    }

    // Función para convertir horas en minutos correctamente
    function parseTime(timeString) {
        if (typeof timeString !== "string") {
            return timeString; // Si ya es numérico, simplemente regresarlo
        }

        const [hours, minutes] = timeString.split(":").map(Number);
        return hours * 60 + minutes; // Convertir a minutos totales
    }

</script>